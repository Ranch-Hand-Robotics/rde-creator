{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Robot Creator Extension Documentation Welcome to the Creator for Robot Developer Extensions! This extension provides AI-powered tools to streamline ROS 2 package development across multiple programming languages. This extension works with your existing Copilot subscription with prompts specifically crafted for specific ROS 2 development scenarios. NOTE: AI Generated code may not always be correct or optimal. Always review and test generated code thoroughly. If you have issues or improvements for the templates, please submit an issue or pull request on GitHub. Getting Started Installation Open VS Code Go to Extensions ( Ctrl+Shift+X / Cmd+Shift+X ) Search for \"RDE ROS 2 Creator\" Click Install Requirements ROS 2 : Humble, Iron, Jazzy, or Kilted VS Code : Latest version (1.101.0 or higher) GitHub Copilot : Required for AI features Quick Start Open a ROS 2 workspace in VS Code Right-click on your ROS 2 workspace's src directory in Explorer \u2192 \"Create ROS 2 Package\" Choose your template and configure options Use natural language to describe your node (optional) Generate and build your package Having issues? Check our troubleshooting guide . Building and Testing Robot Developer Extensions for ROS 2 Select ctrl+shift+b and run Colcon: Colcon Build Debug to build your workspace. Standard ROS 2 Workflow # Source ROS 2 source /opt/ros/kilted/setup.bash # Build the package colcon build --packages-select your_package # Source the workspace source install/setup.bash # Run tests colcon test --packages-select your_package colcon test-result --verbose Planned work Rust ROS 2 Package Safe, concurrent systems programming Modern Rust features Integration with ROS 2 via rclrs Testing with Rust's built-in framework Micro-ROS Package Embedded systems support Real-time capabilities Integration with micro-ROS libraries Lightweight communication patterns Simulation Package Gazebo integration RViz configurations Simulation-ready launch files Sensor and actuator plugins Testing with simulation scenarios Dockerized Package Containerized ROS 2 environments Dockerfile templates Docker Compose configurations CI/CD pipeline examples Discussions Github Discussions are provided for community driven general guidance, walkthroughs, or support. Sponsor If you find this extension useful, please consider sponsoring Ranch Hand Robotics to help support the development of this extension and other open source projects. License This extension is licensed under the MIT License. Template-generated code follows the license specified during package creation.","title":"Home"},{"location":"index.html#robot-creator-extension-documentation","text":"Welcome to the Creator for Robot Developer Extensions! This extension provides AI-powered tools to streamline ROS 2 package development across multiple programming languages. This extension works with your existing Copilot subscription with prompts specifically crafted for specific ROS 2 development scenarios. NOTE: AI Generated code may not always be correct or optimal. Always review and test generated code thoroughly. If you have issues or improvements for the templates, please submit an issue or pull request on GitHub.","title":"Robot Creator Extension Documentation"},{"location":"index.html#getting-started","text":"","title":"Getting Started"},{"location":"index.html#installation","text":"Open VS Code Go to Extensions ( Ctrl+Shift+X / Cmd+Shift+X ) Search for \"RDE ROS 2 Creator\" Click Install","title":"Installation"},{"location":"index.html#requirements","text":"ROS 2 : Humble, Iron, Jazzy, or Kilted VS Code : Latest version (1.101.0 or higher) GitHub Copilot : Required for AI features","title":"Requirements"},{"location":"index.html#quick-start","text":"Open a ROS 2 workspace in VS Code Right-click on your ROS 2 workspace's src directory in Explorer \u2192 \"Create ROS 2 Package\" Choose your template and configure options Use natural language to describe your node (optional) Generate and build your package Having issues? Check our troubleshooting guide .","title":"Quick Start"},{"location":"index.html#building-and-testing","text":"","title":"Building and Testing"},{"location":"index.html#robot-developer-extensions-for-ros-2","text":"Select ctrl+shift+b and run Colcon: Colcon Build Debug to build your workspace.","title":"Robot Developer Extensions for ROS 2"},{"location":"index.html#standard-ros-2-workflow","text":"# Source ROS 2 source /opt/ros/kilted/setup.bash # Build the package colcon build --packages-select your_package # Source the workspace source install/setup.bash # Run tests colcon test --packages-select your_package colcon test-result --verbose","title":"Standard ROS 2 Workflow"},{"location":"index.html#planned-work","text":"Rust ROS 2 Package Safe, concurrent systems programming Modern Rust features Integration with ROS 2 via rclrs Testing with Rust's built-in framework Micro-ROS Package Embedded systems support Real-time capabilities Integration with micro-ROS libraries Lightweight communication patterns Simulation Package Gazebo integration RViz configurations Simulation-ready launch files Sensor and actuator plugins Testing with simulation scenarios Dockerized Package Containerized ROS 2 environments Dockerfile templates Docker Compose configurations CI/CD pipeline examples","title":"Planned work"},{"location":"index.html#discussions","text":"Github Discussions are provided for community driven general guidance, walkthroughs, or support.","title":"Discussions"},{"location":"index.html#sponsor","text":"If you find this extension useful, please consider sponsoring Ranch Hand Robotics to help support the development of this extension and other open source projects.","title":"Sponsor"},{"location":"index.html#license","text":"This extension is licensed under the MIT License. Template-generated code follows the license specified during package creation.","title":"License"},{"location":"CONTRIBUTING.html","text":"Contributing to ROS 2 Template Creator Thank you for your interest in contributing to the ROS 2 Template Creator extension! This document provides guidelines for contributors. Development Setup Prerequisites Node.js 24+ and npm VS Code with extension development dependencies ROS 2 (any supported distribution) GitHub Copilot (recommended for testing AI features) Getting Started Fork and clone the repository Install dependencies: npm install Open in VS Code Run npm run watch to start development mode Press F5 to launch extension development host Architecture Overview The extension uses a React-based webview for the UI and TypeScript for the backend. Key components: src/extension.ts : Main extension entry point src/CreateNodePanel.ts : Webview panel management src/AIPackageGenerator.ts : AI-powered package generation src/webview/webview.tsx : React UI components src/templates/ : Template definitions and manifests Adding New Templates Template Structure Templates are located in src/templates/ and consist of: - manifest.yaml : Template metadata and AI directives - Template files (optional): Reference implementations Manifest Format name : \"Template Display Name\" version : 0.0.0 description : \"Detailed description of what this template creates\" license : \"MIT\" icon : \"\ud83d\udd27\" # Emoji icon for UI short_description : \"Brief tagline\" ai_directive : | HIGH PRIORITY REQUIREMENTS: - Specific instructions for AI generation - Code structure requirements - Best practices to follow - Language-specific guidelines # Include concrete code examples REQUIRED CODE STRUCTURE EXAMPLE: &grave;&grave;&grave;language // Example code showing expected structure &grave;&grave;&grave; # File organization Code Layout: package_name/ \u251c\u2500\u2500 required_file.ext \u2514\u2500\u2500 directory/ \u2514\u2500\u2500 another_file.ext Manifest Fields Field Required Description name Yes Display name shown in UI version Yes Template version description Yes Detailed description license Yes SPDX license identifier icon Yes Emoji icon for visual identification short_description Yes Brief tagline (under 50 chars) ai_directive Yes Instructions for AI code generation AI Directive Best Practices Be Specific : Provide concrete code examples, not just descriptions Include Structure : Show exact file layouts and class hierarchies Language Standards : Specify version requirements (C++17+, Python 3.12+) ROS 2 Patterns : Include proper node lifecycle, error handling, logging Cross-Platform : Address Windows, Linux, macOS compatibility Testing : Include test generation guidelines when applicable Template Validation Before submitting: 1. Test template generation with various parameter combinations 2. Verify generated code compiles and runs 3. Check that tests pass (if included) 4. Validate manifest YAML syntax 5. Ensure AI directives produce consistent results Example: Adding a C++ Template Create src/templates/my_cpp_template/manifest.yaml Define comprehensive AI directive with code examples Test generation with different configurations Update documentation Code Style Guidelines TypeScript Use TypeScript strict mode Prefer const over let Use async/await over Promises Include JSDoc comments for public APIs React Components Use functional components with hooks Follow React best practices Include PropTypes for component props Use TypeScript interfaces for complex props Error Handling Use try/catch for async operations Provide meaningful error messages Log errors appropriately Handle edge cases gracefully Testing Unit Tests Located in test/ directory Use Mocha test framework Run with npm test Cover critical paths and error conditions Integration Testing Test template generation end-to-end Verify generated packages build successfully Test AI generation with various prompts Manual Testing Test in extension development host Verify UI interactions Test with different ROS 2 distributions Validate generated code quality Pull Request Process Fork the repository Create a feature branch: git checkout -b feature/your-feature Make your changes following the guidelines above Test thoroughly (unit tests, integration tests, manual testing) Update documentation as needed Commit with clear, descriptive messages Push to your fork Create a Pull Request with: Clear title and description Reference to any related issues Screenshots/videos for UI changes Test results Documentation Updating Docs User-facing docs: docs/ directory (MkDocs format) API docs: JSDoc comments in code Template docs: Update relevant template documentation Building Docs # Install MkDocs if not already installed pip install mkdocs mkdocs-material # Serve docs locally mkdocs serve # Build docs mkdocs build Release Process Version Bumping Update package.json version Update template versions in manifests Update changelog Publishing Run full test suite Build production extension: npm run package Publish to VS Code marketplace Create GitHub release Community Issues : Use GitHub issues for bugs and feature requests Discussions : Use GitHub discussions for questions and ideas Code of Conduct : Follow our community guidelines Recognition Contributors will be recognized in: - CHANGELOG.md for significant contributions - GitHub repository contributors list - Release notes Thank you for contributing to the ROS 2 Template Creator!","title":"Contributing"},{"location":"CONTRIBUTING.html#contributing-to-ros-2-template-creator","text":"Thank you for your interest in contributing to the ROS 2 Template Creator extension! This document provides guidelines for contributors.","title":"Contributing to ROS 2 Template Creator"},{"location":"CONTRIBUTING.html#development-setup","text":"","title":"Development Setup"},{"location":"CONTRIBUTING.html#prerequisites","text":"Node.js 24+ and npm VS Code with extension development dependencies ROS 2 (any supported distribution) GitHub Copilot (recommended for testing AI features)","title":"Prerequisites"},{"location":"CONTRIBUTING.html#getting-started","text":"Fork and clone the repository Install dependencies: npm install Open in VS Code Run npm run watch to start development mode Press F5 to launch extension development host","title":"Getting Started"},{"location":"CONTRIBUTING.html#architecture-overview","text":"The extension uses a React-based webview for the UI and TypeScript for the backend. Key components: src/extension.ts : Main extension entry point src/CreateNodePanel.ts : Webview panel management src/AIPackageGenerator.ts : AI-powered package generation src/webview/webview.tsx : React UI components src/templates/ : Template definitions and manifests","title":"Architecture Overview"},{"location":"CONTRIBUTING.html#adding-new-templates","text":"","title":"Adding New Templates"},{"location":"CONTRIBUTING.html#template-structure","text":"Templates are located in src/templates/ and consist of: - manifest.yaml : Template metadata and AI directives - Template files (optional): Reference implementations","title":"Template Structure"},{"location":"CONTRIBUTING.html#manifest-format","text":"name : \"Template Display Name\" version : 0.0.0 description : \"Detailed description of what this template creates\" license : \"MIT\" icon : \"\ud83d\udd27\" # Emoji icon for UI short_description : \"Brief tagline\" ai_directive : | HIGH PRIORITY REQUIREMENTS: - Specific instructions for AI generation - Code structure requirements - Best practices to follow - Language-specific guidelines # Include concrete code examples REQUIRED CODE STRUCTURE EXAMPLE: &grave;&grave;&grave;language // Example code showing expected structure &grave;&grave;&grave; # File organization Code Layout: package_name/ \u251c\u2500\u2500 required_file.ext \u2514\u2500\u2500 directory/ \u2514\u2500\u2500 another_file.ext","title":"Manifest Format"},{"location":"CONTRIBUTING.html#manifest-fields","text":"Field Required Description name Yes Display name shown in UI version Yes Template version description Yes Detailed description license Yes SPDX license identifier icon Yes Emoji icon for visual identification short_description Yes Brief tagline (under 50 chars) ai_directive Yes Instructions for AI code generation","title":"Manifest Fields"},{"location":"CONTRIBUTING.html#ai-directive-best-practices","text":"Be Specific : Provide concrete code examples, not just descriptions Include Structure : Show exact file layouts and class hierarchies Language Standards : Specify version requirements (C++17+, Python 3.12+) ROS 2 Patterns : Include proper node lifecycle, error handling, logging Cross-Platform : Address Windows, Linux, macOS compatibility Testing : Include test generation guidelines when applicable","title":"AI Directive Best Practices"},{"location":"CONTRIBUTING.html#template-validation","text":"Before submitting: 1. Test template generation with various parameter combinations 2. Verify generated code compiles and runs 3. Check that tests pass (if included) 4. Validate manifest YAML syntax 5. Ensure AI directives produce consistent results","title":"Template Validation"},{"location":"CONTRIBUTING.html#example-adding-a-c-template","text":"Create src/templates/my_cpp_template/manifest.yaml Define comprehensive AI directive with code examples Test generation with different configurations Update documentation","title":"Example: Adding a C++ Template"},{"location":"CONTRIBUTING.html#code-style-guidelines","text":"","title":"Code Style Guidelines"},{"location":"CONTRIBUTING.html#typescript","text":"Use TypeScript strict mode Prefer const over let Use async/await over Promises Include JSDoc comments for public APIs","title":"TypeScript"},{"location":"CONTRIBUTING.html#react-components","text":"Use functional components with hooks Follow React best practices Include PropTypes for component props Use TypeScript interfaces for complex props","title":"React Components"},{"location":"CONTRIBUTING.html#error-handling","text":"Use try/catch for async operations Provide meaningful error messages Log errors appropriately Handle edge cases gracefully","title":"Error Handling"},{"location":"CONTRIBUTING.html#testing","text":"","title":"Testing"},{"location":"CONTRIBUTING.html#unit-tests","text":"Located in test/ directory Use Mocha test framework Run with npm test Cover critical paths and error conditions","title":"Unit Tests"},{"location":"CONTRIBUTING.html#integration-testing","text":"Test template generation end-to-end Verify generated packages build successfully Test AI generation with various prompts","title":"Integration Testing"},{"location":"CONTRIBUTING.html#manual-testing","text":"Test in extension development host Verify UI interactions Test with different ROS 2 distributions Validate generated code quality","title":"Manual Testing"},{"location":"CONTRIBUTING.html#pull-request-process","text":"Fork the repository Create a feature branch: git checkout -b feature/your-feature Make your changes following the guidelines above Test thoroughly (unit tests, integration tests, manual testing) Update documentation as needed Commit with clear, descriptive messages Push to your fork Create a Pull Request with: Clear title and description Reference to any related issues Screenshots/videos for UI changes Test results","title":"Pull Request Process"},{"location":"CONTRIBUTING.html#documentation","text":"","title":"Documentation"},{"location":"CONTRIBUTING.html#updating-docs","text":"User-facing docs: docs/ directory (MkDocs format) API docs: JSDoc comments in code Template docs: Update relevant template documentation","title":"Updating Docs"},{"location":"CONTRIBUTING.html#building-docs","text":"# Install MkDocs if not already installed pip install mkdocs mkdocs-material # Serve docs locally mkdocs serve # Build docs mkdocs build","title":"Building Docs"},{"location":"CONTRIBUTING.html#release-process","text":"","title":"Release Process"},{"location":"CONTRIBUTING.html#version-bumping","text":"Update package.json version Update template versions in manifests Update changelog","title":"Version Bumping"},{"location":"CONTRIBUTING.html#publishing","text":"Run full test suite Build production extension: npm run package Publish to VS Code marketplace Create GitHub release","title":"Publishing"},{"location":"CONTRIBUTING.html#community","text":"Issues : Use GitHub issues for bugs and feature requests Discussions : Use GitHub discussions for questions and ideas Code of Conduct : Follow our community guidelines","title":"Community"},{"location":"CONTRIBUTING.html#recognition","text":"Contributors will be recognized in: - CHANGELOG.md for significant contributions - GitHub repository contributors list - Release notes Thank you for contributing to the ROS 2 Template Creator!","title":"Recognition"},{"location":"cpp-package.html","text":"C++ ROS 2 Package Template The C++ ROS 2 Package template generates high-performance, composable ROS 2 nodes using modern C++ standards and best practices. Overview This template creates production-ready ROS 2 nodes with: Modern C++ : C++17+ features with RAII principles Component Architecture : Full rclcpp_components support Cross-Platform : Windows, Linux, and macOS compatibility Lifecycle Management : Optional rclcpp_lifecycle integration Testing : Integrated gtest framework Visibility Control : Proper symbol visibility management Generated Structure your_package/ \u251c\u2500\u2500 CMakeLists.txt # Modern Cmake with ROS distro detection \u251c\u2500\u2500 package.xml # ROS 2 package manifest \u251c\u2500\u2500 README.md # Package documentation \u251c\u2500\u2500 CONTRIBUTING.md # Development guidelines \u251c\u2500\u2500 Agents.md # AI interaction guide \u251c\u2500\u2500 include/ \u2502 \u2514\u2500\u2500 your_package/ \u2502 \u251c\u2500\u2500 your_package.hpp # Main node header \u2502 \u2514\u2500\u2500 your_package_visibility_control.h # Visibility macros \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 your_package.cpp # Main node implementation \u2502 \u2514\u2500\u2500 your_package_component.cpp # Component registration \u251c\u2500\u2500 launch/ \u2502 \u2514\u2500\u2500 your_package_node.launch.py # Launch configuration \u251c\u2500\u2500 resource/ \u2502 \u2514\u2500\u2500 your_package # Ament index resource \u2514\u2500\u2500 test/ \u2514\u2500\u2500 test_your_package.cpp # Unit tests Key Features Component-Based Architecture Generated nodes are fully composable: // Component registration #include \"rclcpp_components/register_node_macro.hpp\" RCLCPP_COMPONENTS_REGISTER_NODE ( your_package :: YourPackageNode ); Visibility Control Cross-platform symbol visibility management: // Visibility control header #ifndef YOUR_PACKAGE__VISIBILITY_CONTROL_H_ #define YOUR_PACKAGE__VISIBILITY_CONTROL_H_ // Platform-specific visibility macros #endif // Class declaration class YOUR_PACKAGE_PUBLIC YourPackageNode : public rclcpp :: Node { // ... }; Modern CMake Automatic ROS distribution detection: # Runtime ROS distro detection set ( ROS_DISTRO $ENV{ ROS_DISTRO } ) if ( ROS_DISTRO STREQUAL \"humble\" OR ROS_DISTRO STREQUAL \"galactic\" OR ROS_DISTRO STREQUAL \"foxy\" ) # Legacy ament_target_dependencies approach ament_target_dependencies ( your_package_component rclcpp rclcpp_components ) else () # Modern target_link_libraries approach target_link_libraries ( your_package_component PUBLIC rclcpp::rclcpp ) endif () Usage Examples Basic Publisher Node class PublisherNode : public rclcpp :: Node { public : PublisherNode () : Node ( \"publisher_node\" ) { publisher_ = create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = create_wall_timer ( std :: chrono :: milliseconds ( 100 ), std :: bind ( & PublisherNode :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, ROS 2!\" ; RCLCPP_INFO ( get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; rclcpp :: TimerBase :: SharedPtr timer_ ; }; Service Server class ServiceNode : public rclcpp :: Node { public : ServiceNode () : Node ( \"service_node\" ) { service_ = create_service < example_interfaces :: srv :: AddTwoInts > ( \"add_two_ints\" , std :: bind ( & ServiceNode :: handle_service , this , _1 , _2 , _3 )); } private : void handle_service ( const std :: shared_ptr < rmw_request_id_t > request_header , const std :: shared_ptr < example_interfaces :: srv :: AddTwoInts :: Request > request , const std :: shared_ptr < example_interfaces :: srv :: AddTwoInts :: Response > response ) { response -> sum = request -> a + request -> b ; RCLCPP_INFO ( get_logger (), \"Incoming request: %ld + %ld = %ld\" , request -> a , request -> b , response -> sum ); } rclcpp :: Service < example_interfaces :: srv :: AddTwoInts >:: SharedPtr service_ ; }; Configuration Options Lifecycle Support Enable lifecycle management for nodes that need state transitions: - Configure : Parameter validation and resource allocation - Activate : Start publishing/subscribing - Deactivate : Pause operations - Cleanup : Release resources - Shutdown : Final cleanup Communication Patterns Publishers : Data broadcasting Subscribers : Data reception with callbacks Services : Request-response communication Actions : Long-running task coordination Parameters : Dynamic configuration Building and Testing Build Process # Standard colcon build colcon build --packages-select your_package # With tests colcon build --packages-select your_package --cmake-args -DBUILD_TESTING = ON Running Tests # Run tests colcon test --packages-select your_package # View results colcon test-result --verbose Component Loading # Load component at runtime ros2 component load /ComponentManager your_package YourPackageNode Best Practices Performance Optimization Use appropriate QoS settings for your use case Minimize dynamic memory allocation in hot paths Use std::chrono for timing instead of deprecated methods Leverage C++17 features like constexpr and if constexpr Error Handling Use ROS 2 logging macros ( RCLCPP_* ) Check return values from ROS 2 APIs Implement proper exception safety Provide meaningful error messages Thread Safety ROS 2 nodes are generally single-threaded Use mutexes for shared data access Consider using rclcpp::executors::MultiThreadedExecutor for concurrent operations Troubleshooting Common Issues Visibility Errors Symptoms: Linker errors about missing symbols Solution: Ensure YOUR_PACKAGE_BUILDING_LIBRARY is defined in CMakeLists.txt Component Not Found Symptoms: ros2 component list doesn't show your component Solution: Check that RCLCPP_COMPONENTS_REGISTER_NODE is called and library is installed Test Discovery Fails Symptoms: Tests not found by colcon test Solution: Ensure test files contain proper TEST() or TEST_F() macros Debug Tips Use RCLCPP_DEBUG for detailed logging Enable ROS 2 debug logging: ros2 run your_package your_node --ros-args --log-level debug Use gdb or lldb for native debugging Check component loading with verbose output Advanced Usage Custom Message Types Add custom message dependencies to package.xml and CMakeLists.txt : <!-- package.xml --> <depend> your_custom_msgs </depend> # CMakeLists.txt find_package ( your_custom_msgs REQUIRED ) ament_target_dependencies ( your_package_component your_custom_msgs ) Parameter Management // Declare parameters declare_parameter ( \"rate\" , 10.0 ); declare_parameter ( \"topic_name\" , \"default_topic\" ); // Use parameters double rate = get_parameter ( \"rate\" ). as_double (); std :: string topic = get_parameter ( \"topic_name\" ). as_string (); Lifecycle Integration class LifecycleNode : public rclcpp_lifecycle :: LifecycleNode { // Implement lifecycle callbacks LifecycleNodeReturn on_configure ( const rclcpp_lifecycle :: State & ) override ; LifecycleNodeReturn on_activate ( const rclcpp_lifecycle :: State & ) override ; LifecycleNodeReturn on_deactivate ( const rclcpp_lifecycle :: State & ) override ; LifecycleNodeReturn on_cleanup ( const rclcpp_lifecycle :: State & ) override ; LifecycleNodeReturn on_shutdown ( const rclcpp_lifecycle :: State & ) override ; }; Migration from ROS 1 If migrating from ROS 1 C++ nodes: - Replace ros::init() with rclcpp::init() - Use rclcpp::Node instead of ros::NodeHandle - Replace ROS 1 message types with ROS 2 equivalents - Update CMakeLists.txt to use ament_cmake - Use modern C++ features and smart pointers Contributing To improve this template: Test with different ROS 2 distributions Verify cross-platform compatibility Add performance benchmarks Include more communication pattern examples Enhance error handling and logging See the contributing guide for details on modifying templates.","title":"C++ ROS 2 Package"},{"location":"cpp-package.html#c-ros-2-package-template","text":"The C++ ROS 2 Package template generates high-performance, composable ROS 2 nodes using modern C++ standards and best practices.","title":"C++ ROS 2 Package Template"},{"location":"cpp-package.html#overview","text":"This template creates production-ready ROS 2 nodes with: Modern C++ : C++17+ features with RAII principles Component Architecture : Full rclcpp_components support Cross-Platform : Windows, Linux, and macOS compatibility Lifecycle Management : Optional rclcpp_lifecycle integration Testing : Integrated gtest framework Visibility Control : Proper symbol visibility management","title":"Overview"},{"location":"cpp-package.html#generated-structure","text":"your_package/ \u251c\u2500\u2500 CMakeLists.txt # Modern Cmake with ROS distro detection \u251c\u2500\u2500 package.xml # ROS 2 package manifest \u251c\u2500\u2500 README.md # Package documentation \u251c\u2500\u2500 CONTRIBUTING.md # Development guidelines \u251c\u2500\u2500 Agents.md # AI interaction guide \u251c\u2500\u2500 include/ \u2502 \u2514\u2500\u2500 your_package/ \u2502 \u251c\u2500\u2500 your_package.hpp # Main node header \u2502 \u2514\u2500\u2500 your_package_visibility_control.h # Visibility macros \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 your_package.cpp # Main node implementation \u2502 \u2514\u2500\u2500 your_package_component.cpp # Component registration \u251c\u2500\u2500 launch/ \u2502 \u2514\u2500\u2500 your_package_node.launch.py # Launch configuration \u251c\u2500\u2500 resource/ \u2502 \u2514\u2500\u2500 your_package # Ament index resource \u2514\u2500\u2500 test/ \u2514\u2500\u2500 test_your_package.cpp # Unit tests","title":"Generated Structure"},{"location":"cpp-package.html#key-features","text":"","title":"Key Features"},{"location":"cpp-package.html#component-based-architecture","text":"Generated nodes are fully composable: // Component registration #include \"rclcpp_components/register_node_macro.hpp\" RCLCPP_COMPONENTS_REGISTER_NODE ( your_package :: YourPackageNode );","title":"Component-Based Architecture"},{"location":"cpp-package.html#visibility-control","text":"Cross-platform symbol visibility management: // Visibility control header #ifndef YOUR_PACKAGE__VISIBILITY_CONTROL_H_ #define YOUR_PACKAGE__VISIBILITY_CONTROL_H_ // Platform-specific visibility macros #endif // Class declaration class YOUR_PACKAGE_PUBLIC YourPackageNode : public rclcpp :: Node { // ... };","title":"Visibility Control"},{"location":"cpp-package.html#modern-cmake","text":"Automatic ROS distribution detection: # Runtime ROS distro detection set ( ROS_DISTRO $ENV{ ROS_DISTRO } ) if ( ROS_DISTRO STREQUAL \"humble\" OR ROS_DISTRO STREQUAL \"galactic\" OR ROS_DISTRO STREQUAL \"foxy\" ) # Legacy ament_target_dependencies approach ament_target_dependencies ( your_package_component rclcpp rclcpp_components ) else () # Modern target_link_libraries approach target_link_libraries ( your_package_component PUBLIC rclcpp::rclcpp ) endif ()","title":"Modern CMake"},{"location":"cpp-package.html#usage-examples","text":"","title":"Usage Examples"},{"location":"cpp-package.html#basic-publisher-node","text":"class PublisherNode : public rclcpp :: Node { public : PublisherNode () : Node ( \"publisher_node\" ) { publisher_ = create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = create_wall_timer ( std :: chrono :: milliseconds ( 100 ), std :: bind ( & PublisherNode :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, ROS 2!\" ; RCLCPP_INFO ( get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; rclcpp :: TimerBase :: SharedPtr timer_ ; };","title":"Basic Publisher Node"},{"location":"cpp-package.html#service-server","text":"class ServiceNode : public rclcpp :: Node { public : ServiceNode () : Node ( \"service_node\" ) { service_ = create_service < example_interfaces :: srv :: AddTwoInts > ( \"add_two_ints\" , std :: bind ( & ServiceNode :: handle_service , this , _1 , _2 , _3 )); } private : void handle_service ( const std :: shared_ptr < rmw_request_id_t > request_header , const std :: shared_ptr < example_interfaces :: srv :: AddTwoInts :: Request > request , const std :: shared_ptr < example_interfaces :: srv :: AddTwoInts :: Response > response ) { response -> sum = request -> a + request -> b ; RCLCPP_INFO ( get_logger (), \"Incoming request: %ld + %ld = %ld\" , request -> a , request -> b , response -> sum ); } rclcpp :: Service < example_interfaces :: srv :: AddTwoInts >:: SharedPtr service_ ; };","title":"Service Server"},{"location":"cpp-package.html#configuration-options","text":"","title":"Configuration Options"},{"location":"cpp-package.html#lifecycle-support","text":"Enable lifecycle management for nodes that need state transitions: - Configure : Parameter validation and resource allocation - Activate : Start publishing/subscribing - Deactivate : Pause operations - Cleanup : Release resources - Shutdown : Final cleanup","title":"Lifecycle Support"},{"location":"cpp-package.html#communication-patterns","text":"Publishers : Data broadcasting Subscribers : Data reception with callbacks Services : Request-response communication Actions : Long-running task coordination Parameters : Dynamic configuration","title":"Communication Patterns"},{"location":"cpp-package.html#building-and-testing","text":"","title":"Building and Testing"},{"location":"cpp-package.html#build-process","text":"# Standard colcon build colcon build --packages-select your_package # With tests colcon build --packages-select your_package --cmake-args -DBUILD_TESTING = ON","title":"Build Process"},{"location":"cpp-package.html#running-tests","text":"# Run tests colcon test --packages-select your_package # View results colcon test-result --verbose","title":"Running Tests"},{"location":"cpp-package.html#component-loading","text":"# Load component at runtime ros2 component load /ComponentManager your_package YourPackageNode","title":"Component Loading"},{"location":"cpp-package.html#best-practices","text":"","title":"Best Practices"},{"location":"cpp-package.html#performance-optimization","text":"Use appropriate QoS settings for your use case Minimize dynamic memory allocation in hot paths Use std::chrono for timing instead of deprecated methods Leverage C++17 features like constexpr and if constexpr","title":"Performance Optimization"},{"location":"cpp-package.html#error-handling","text":"Use ROS 2 logging macros ( RCLCPP_* ) Check return values from ROS 2 APIs Implement proper exception safety Provide meaningful error messages","title":"Error Handling"},{"location":"cpp-package.html#thread-safety","text":"ROS 2 nodes are generally single-threaded Use mutexes for shared data access Consider using rclcpp::executors::MultiThreadedExecutor for concurrent operations","title":"Thread Safety"},{"location":"cpp-package.html#troubleshooting","text":"","title":"Troubleshooting"},{"location":"cpp-package.html#common-issues","text":"","title":"Common Issues"},{"location":"cpp-package.html#visibility-errors","text":"Symptoms: Linker errors about missing symbols Solution: Ensure YOUR_PACKAGE_BUILDING_LIBRARY is defined in CMakeLists.txt","title":"Visibility Errors"},{"location":"cpp-package.html#component-not-found","text":"Symptoms: ros2 component list doesn't show your component Solution: Check that RCLCPP_COMPONENTS_REGISTER_NODE is called and library is installed","title":"Component Not Found"},{"location":"cpp-package.html#test-discovery-fails","text":"Symptoms: Tests not found by colcon test Solution: Ensure test files contain proper TEST() or TEST_F() macros","title":"Test Discovery Fails"},{"location":"cpp-package.html#debug-tips","text":"Use RCLCPP_DEBUG for detailed logging Enable ROS 2 debug logging: ros2 run your_package your_node --ros-args --log-level debug Use gdb or lldb for native debugging Check component loading with verbose output","title":"Debug Tips"},{"location":"cpp-package.html#advanced-usage","text":"","title":"Advanced Usage"},{"location":"cpp-package.html#custom-message-types","text":"Add custom message dependencies to package.xml and CMakeLists.txt : <!-- package.xml --> <depend> your_custom_msgs </depend> # CMakeLists.txt find_package ( your_custom_msgs REQUIRED ) ament_target_dependencies ( your_package_component your_custom_msgs )","title":"Custom Message Types"},{"location":"cpp-package.html#parameter-management","text":"// Declare parameters declare_parameter ( \"rate\" , 10.0 ); declare_parameter ( \"topic_name\" , \"default_topic\" ); // Use parameters double rate = get_parameter ( \"rate\" ). as_double (); std :: string topic = get_parameter ( \"topic_name\" ). as_string ();","title":"Parameter Management"},{"location":"cpp-package.html#lifecycle-integration","text":"class LifecycleNode : public rclcpp_lifecycle :: LifecycleNode { // Implement lifecycle callbacks LifecycleNodeReturn on_configure ( const rclcpp_lifecycle :: State & ) override ; LifecycleNodeReturn on_activate ( const rclcpp_lifecycle :: State & ) override ; LifecycleNodeReturn on_deactivate ( const rclcpp_lifecycle :: State & ) override ; LifecycleNodeReturn on_cleanup ( const rclcpp_lifecycle :: State & ) override ; LifecycleNodeReturn on_shutdown ( const rclcpp_lifecycle :: State & ) override ; };","title":"Lifecycle Integration"},{"location":"cpp-package.html#migration-from-ros-1","text":"If migrating from ROS 1 C++ nodes: - Replace ros::init() with rclcpp::init() - Use rclcpp::Node instead of ros::NodeHandle - Replace ROS 1 message types with ROS 2 equivalents - Update CMakeLists.txt to use ament_cmake - Use modern C++ features and smart pointers","title":"Migration from ROS 1"},{"location":"cpp-package.html#contributing","text":"To improve this template: Test with different ROS 2 distributions Verify cross-platform compatibility Add performance benchmarks Include more communication pattern examples Enhance error handling and logging See the contributing guide for details on modifying templates.","title":"Contributing"},{"location":"nodejs-package.html","text":"Node.js ROS 2 Package Template The Node.js ROS 2 Package template generates ROS 2 nodes using the rclnodejs library, enabling web integration and asynchronous operations in JavaScript/TypeScript. Overview This template creates Node.js-based ROS 2 nodes with: - Full rclnodejs Integration : Complete ROS 2 functionality in JavaScript - Promise-Based Async : Modern async/await patterns - Web Capabilities : HTTP server integration and REST APIs - TypeScript Support : Optional TypeScript with type definitions - Testing : Jest integration with ROS 2 mocks - Event-Driven : Native Node.js event loop integration Generated Structure your_package/ \u251c\u2500\u2500 package.json # Node.js package configuration \u251c\u2500\u2500 tsconfig.json # TypeScript configuration (optional) \u251c\u2500\u2500 package.xml # ROS 2 package manifest \u251c\u2500\u2500 README.md # Package documentation \u251c\u2500\u2500 CONTRIBUTING.md # Development guidelines \u251c\u2500\u2500 Agents.md # AI interaction guide \u251c\u2500\u2500 lib/ \u2502 \u251c\u2500\u2500 index.js # Main entry point \u2502 \u251c\u2500\u2500 your_package_node.js # Main node implementation \u2502 \u2514\u2500\u2500 utils.js # Utility functions \u251c\u2500\u2500 launch/ \u2502 \u2514\u2500\u2500 your_package_node.launch.py # Launch configuration \u251c\u2500\u2500 resource/ \u2502 \u2514\u2500\u2500 your_package # Ament index resource \u251c\u2500\u2500 test/ \u2502 \u251c\u2500\u2500 your_package_node.test.js # Unit tests \u2502 \u2514\u2500\u2500 __mocks__/ # Jest mocks \u2514\u2500\u2500 docs/ \u2514\u2500\u2500 api.md # API documentation Key Features Promise-Based Async Operations Native Promise support for ROS 2 operations: const rclnodejs = require ( 'rclnodejs' ); class AsyncNode extends rclnodejs . Node { constructor () { super ( 'async_node' ); // Async service client this . client = this . createClient ( 'example_interfaces/srv/AddTwoInts' , 'add_two_ints' ); // Async publisher this . publisher = this . createPublisher ( 'std_msgs/msg/String' , 'chatter' ); // Timer with async callback this . timer = this . createTimer ( 1000 , async () => { await this . publishMessage (); }); } async publishMessage () { const msg = { data : `Hello ROS 2! Time: ${ Date . now () } ` }; await this . publisher . publish ( msg ); this . getLogger (). info ( `Published: ${ msg . data } ` ); } async callService ( a , b ) { const request = { a , b }; try { const response = await this . client . sendRequest ( request ); this . getLogger (). info ( `Result: ${ a } + ${ b } = ${ response . sum } ` ); return response . sum ; } catch ( error ) { this . getLogger (). error ( `Service call failed: ${ error } ` ); throw error ; } } } Web Integration Built-in HTTP server capabilities: const express = require ( 'express' ); const rclnodejs = require ( 'rclnodejs' ); class WebEnabledNode extends rclnodejs . Node { constructor () { super ( 'web_node' ); // Express app for REST API this . app = express (); this . app . use ( express . json ()); // ROS 2 service this . service = this . createService ( 'std_srvs/srv/Trigger' , 'trigger_service' , this . handleTrigger . bind ( this ) ); // REST endpoints this . app . get ( '/status' , ( req , res ) => { res . json ({ node_name : this . name (), status : 'running' , services : this . getServiceNamesAndTypes () }); }); this . app . post ( '/trigger' , async ( req , res ) => { try { // Call ROS 2 service const result = await this . callTriggerService (); res . json ({ success : true , result }); } catch ( error ) { res . status ( 500 ). json ({ error : error . message }); } }); // Start web server this . server = this . app . listen ( 3000 , () => { this . getLogger (). info ( 'Web server listening on port 3000' ); }); } async handleTrigger ( request , response ) { this . getLogger (). info ( 'Trigger service called' ); // Perform async operation await this . performAsyncTask (); return { success : true , message : 'Trigger executed successfully' }; } destroy () { if ( this . server ) { this . server . close (); } super . destroy (); } } TypeScript Support Optional TypeScript with full type safety: import * as rclnodejs from 'rclnodejs' ; interface PublisherConfig { topicName : string ; messageType : string ; publishRate : number ; } class TypedPublisher extends rclnodejs . Node { private publisher : rclnodejs.Publisher < any > ; private timer : rclnodejs.Timer ; private config : PublisherConfig ; constructor ( config : PublisherConfig ) { super ( 'typed_publisher' ); this . config = config ; this . publisher = this . createPublisher ( config . messageType , config . topicName ); this . timer = this . createTimer ( 1000 / config . publishRate , this . publishCallback . bind ( this ) ); } private publishCallback () : void { const message = this . createMessage (); this . publisher . publish ( message ); this . getLogger (). info ( `Published to ${ this . config . topicName } ` ); } private createMessage () : any { // Type-safe message creation return { data : `Message at ${ new Date (). toISOString () } ` , timestamp : Date.now () }; } } Usage Examples Basic Publisher const rclnodejs = require ( 'rclnodejs' ); class MinimalPublisher extends rclnodejs . Node { constructor () { super ( 'minimal_publisher' ); this . publisher = this . createPublisher ( 'std_msgs/msg/String' , 'topic' ); this . timer = this . createTimer ( 500 , () => { this . publishMessage (); }); this . messageCount = 0 ; } publishMessage () { const msg = { data : `Hello World: ${ this . messageCount } ` }; this . publisher . publish ( msg ); this . getLogger (). info ( `Publishing: \" ${ msg . data } \"` ); this . messageCount ++ ; } } async function main () { await rclnodejs . init (); const node = new MinimalPublisher (); rclnodejs . spin ( node ); } main (); Service Server const rclnodejs = require ( 'rclnodejs' ); class MinimalService extends rclnodejs . Node { constructor () { super ( 'minimal_service' ); this . service = this . createService ( 'example_interfaces/srv/AddTwoInts' , 'add_two_ints' , this . addCallback . bind ( this ) ); } addCallback ( request , response ) { this . getLogger (). info ( `Incoming request: ${ request . a } + ${ request . b } ` ); response . sum = request . a + request . b ; return response ; } } async function main () { await rclnodejs . init (); const node = new MinimalService (); rclnodejs . spin ( node ); } main (); Action Client const rclnodejs = require ( 'rclnodejs' ); class FibonacciActionClient extends rclnodejs . Node { constructor () { super ( 'fibonacci_action_client' ); this . actionClient = this . createActionClient ( 'example_interfaces/action/Fibonacci' , 'fibonacci' ); this . actionClient . waitForServer (). then (() => { this . sendGoal (); }); } async sendGoal () { const goal = { order : 10 }; try { const goalHandle = await this . actionClient . sendGoal ( goal ); // Handle feedback goalHandle . on ( 'feedback' , ( feedback ) => { this . getLogger (). info ( `Feedback: ${ feedback . sequence } ` ); }); // Wait for result const result = await goalHandle . getResult (); this . getLogger (). info ( `Result: ${ result . sequence } ` ); } catch ( error ) { this . getLogger (). error ( `Action failed: ${ error } ` ); } } } Configuration Options Communication Patterns Publishers : Data broadcasting with QoS settings Subscribers : Event-driven data reception Services : Request-response with Promise support Actions : Long-running task coordination Parameters : Dynamic configuration management Quality of Service (QoS) // Define QoS profiles const sensorQoS = { reliability : rclnodejs . QoS . ReliabilityPolicy . BEST_EFFORT , durability : rclnodejs . QoS . DurabilityPolicy . VOLATILE , depth : 10 }; const stateQoS = { reliability : rclnodejs . QoS . ReliabilityPolicy . RELIABLE , durability : rclnodejs . QoS . DurabilityPolicy . TRANSIENT_LOCAL , depth : 1 }; // Use with publishers/subscribers this . publisher = this . createPublisher ( 'sensor_msgs/msg/LaserScan' , 'scan' , sensorQoS ); this . subscriber = this . createSubscription ( 'nav_msgs/msg/Odometry' , 'odom' , stateQoS , callback ); Building and Testing Installation # Install dependencies npm install # Build TypeScript (if used) npm run build # Install ROS 2 package colcon build --packages-select your_package source install/setup.bash Running Tests # Run Jest tests npm test # With coverage npm run test:coverage # Using colcon colcon test --packages-select your_package Running the Node # Direct execution node lib/index.js # Using ROS 2 launch ros2 launch your_package your_package_node.launch.py # With environment variables NODE_ENV = production node lib/index.js Best Practices Error Handling class RobustNode extends rclnodejs . Node { constructor () { super ( 'robust_node' ); // Handle async errors this . setupServices (). catch ( error => { this . getLogger (). error ( `Setup failed: ${ error } ` ); process . exit ( 1 ); }); } async setupServices () { try { this . service = this . createService ( 'std_srvs/srv/Trigger' , 'my_service' , this . handleService . bind ( this ) ); } catch ( error ) { this . getLogger (). error ( `Service creation failed: ${ error } ` ); throw error ; } } handleService ( request , response ) { try { // Service logic with error handling if ( ! this . validateRequest ( request )) { return { success : false , message : 'Invalid request' }; } return { success : true , message : 'Service executed successfully' }; } catch ( error ) { this . getLogger (). error ( `Service error: ${ error } ` ); return { success : false , message : `Internal error: ${ error . message } ` }; } } validateRequest ( request ) { // Validation logic return true ; } } Memory Management class MemoryEfficientNode extends rclnodejs . Node { constructor () { super ( 'memory_efficient_node' ); // Use object pooling for frequently created objects this . messagePool = []; this . maxPoolSize = 10 ; this . publisher = this . createPublisher ( 'std_msgs/msg/String' , 'topic' ); this . timer = this . createTimer ( 100 , () => { const msg = this . getMessageFromPool (); msg . data = `Message ${ Date . now () } ` ; this . publisher . publish ( msg ); this . returnMessageToPool ( msg ); }); } getMessageFromPool () { return this . messagePool . pop () || { data : '' }; } returnMessageToPool ( message ) { if ( this . messagePool . length < this . maxPoolSize ) { // Reset message message . data = '' ; this . messagePool . push ( message ); } } } Logging class WellLoggedNode extends rclnodejs . Node { constructor () { super ( 'well_logged_node' ); // Structured logging this . logger = { debug : ( msg , meta = {}) => this . log ( 'DEBUG' , msg , meta ), info : ( msg , meta = {}) => this . log ( 'INFO' , msg , meta ), warn : ( msg , meta = {}) => this . log ( 'WARN' , msg , meta ), error : ( msg , meta = {}) => this . log ( 'ERROR' , msg , meta ) }; } log ( level , message , metadata = {}) { const logEntry = { level , message , timestamp : new Date (). toISOString (), node : this . name (), ... metadata }; this . getLogger (). info ( JSON . stringify ( logEntry )); } async performOperation () { const startTime = Date . now (); try { this . logger . debug ( 'Starting operation' , { operation : 'performOperation' }); // Operation logic await this . doSomething (); const duration = Date . now () - startTime ; this . logger . info ( 'Operation completed' , { operation : 'performOperation' , duration_ms : duration , success : true }); } catch ( error ) { const duration = Date . now () - startTime ; this . logger . error ( 'Operation failed' , { operation : 'performOperation' , duration_ms : duration , error : error . message , success : false }); throw error ; } } } Testing Jest Integration const rclnodejs = require ( 'rclnodejs' ); describe ( 'PublisherNode' , () => { let node ; beforeAll ( async () => { await rclnodejs . init (); }); afterAll (() => { rclnodejs . shutdown (); }); beforeEach (() => { node = new PublisherNode (); }); afterEach (() => { node . destroy (); }); test ( 'should create publisher' , () => { expect ( node . publisher ). toBeDefined (); expect ( node . publisher . topicName ). toBe ( 'chatter' ); }); test ( 'should publish messages' , ( done ) => { const mockCallback = jest . fn (); const subscription = node . createSubscription ( 'std_msgs/msg/String' , 'chatter' , mockCallback ); // Wait for message setTimeout (() => { expect ( mockCallback ). toHaveBeenCalled (); subscription . destroy (); done (); }, 100 ); }); }); Mocking ROS 2 Components // __mocks__/rclnodejs.js const mockPublisher = { publish : jest . fn (), destroy : jest . fn () }; const mockSubscriber = { destroy : jest . fn () }; const mockService = { destroy : jest . fn () }; module . exports = { init : jest . fn (). mockResolvedValue (), shutdown : jest . fn (), createNode : jest . fn (). mockReturnValue ({ createPublisher : jest . fn (). mockReturnValue ( mockPublisher ), createSubscriber : jest . fn (). mockReturnValue ( mockSubscriber ), createService : jest . fn (). mockReturnValue ( mockService ), destroy : jest . fn () }), QoS : { ReliabilityPolicy : { RELIABLE : 'RELIABLE' , BEST_EFFORT : 'BEST_EFFORT' } } }; Advanced Usage WebSocket Integration const WebSocket = require ( 'ws' ); const rclnodejs = require ( 'rclnodejs' ); class WebSocketNode extends rclnodejs . Node { constructor () { super ( 'websocket_node' ); // ROS 2 subscriber this . subscriber = this . createSubscription ( 'sensor_msgs/msg/Imu' , 'imu' , this . handleImuData . bind ( this ) ); // WebSocket server this . wss = new WebSocket . Server ({ port : 8080 }); this . wss . on ( 'connection' , ( ws ) => { this . getLogger (). info ( 'WebSocket client connected' ); ws . on ( 'message' , ( message ) => { this . handleWebSocketMessage ( ws , message ); }); }); } handleImuData ( msg ) { // Broadcast IMU data to all WebSocket clients const data = JSON . stringify ({ type : 'imu' , data : msg }); this . wss . clients . forEach ( client => { if ( client . readyState === WebSocket . OPEN ) { client . send ( data ); } }); } handleWebSocketMessage ( ws , message ) { try { const data = JSON . parse ( message ); if ( data . type === 'command' ) { // Handle commands from web clients this . processCommand ( data . command ); } } catch ( error ) { this . getLogger (). error ( `Invalid WebSocket message: ${ error } ` ); } } destroy () { if ( this . wss ) { this . wss . close (); } super . destroy (); } } REST API with Express const express = require ( 'express' ); const rclnodejs = require ( 'rclnodejs' ); class RESTNode extends rclnodejs . Node { constructor () { super ( 'rest_node' ); this . app = express (); this . app . use ( express . json ()); // ROS 2 services this . getStatusService = this . createService ( 'std_srvs/srv/Trigger' , 'get_status' , this . handleGetStatus . bind ( this ) ); this . setParameterService = this . createService ( 'rcl_interfaces/srv/SetParameters' , 'set_parameters' , this . handleSetParameters . bind ( this ) ); // REST endpoints this . setupRoutes (); // Start server this . server = this . app . listen ( 3000 , () => { this . getLogger (). info ( 'REST API listening on port 3000' ); }); } setupRoutes () { // Get node status this . app . get ( '/status' , async ( req , res ) => { try { const status = await this . getNodeStatus (); res . json ( status ); } catch ( error ) { res . status ( 500 ). json ({ error : error . message }); } }); // Set parameters this . app . post ( '/parameters' , async ( req , res ) => { try { const result = await this . setParameters ( req . body ); res . json ( result ); } catch ( error ) { res . status ( 400 ). json ({ error : error . message }); } }); // Get topics this . app . get ( '/topics' , ( req , res ) => { const topics = this . getTopicNamesAndTypes (); res . json ({ topics }); }); } async getNodeStatus () { return { name : this . name (), namespace : this . namespace (), publishers : this . getPublisherNamesAndTypes (), subscribers : this . getSubscriberNamesAndTypes (), services : this . getServiceNamesAndTypes (), uptime : process . uptime () }; } destroy () { if ( this . server ) { this . server . close (); } super . destroy (); } } Integration with Databases const { MongoClient } = require ( 'mongodb' ); const rclnodejs = require ( 'rclnodejs' ); class DatabaseNode extends rclnodejs . Node { constructor () { super ( 'database_node' ); this . mongoClient = null ; this . database = null ; // Initialize database connection this . initDatabase (); // ROS 2 subscriber for data storage this . subscriber = this . createSubscription ( 'sensor_msgs/msg/PointCloud2' , 'pointcloud' , this . handlePointCloud . bind ( this ) ); } async initDatabase () { try { this . mongoClient = new MongoClient ( 'mongodb://localhost:27017' ); await this . mongoClient . connect (); this . database = this . mongoClient . db ( 'ros_data' ); this . getLogger (). info ( 'Connected to MongoDB' ); } catch ( error ) { this . getLogger (). error ( `Database connection failed: ${ error } ` ); } } async handlePointCloud ( msg ) { if ( ! this . database ) { this . getLogger (). warn ( 'Database not connected, skipping data storage' ); return ; } try { const collection = this . database . collection ( 'pointclouds' ); const document = { timestamp : new Date (), topic : 'pointcloud' , data : msg // Store the full ROS message }; await collection . insertOne ( document ); this . getLogger (). info ( 'Point cloud data stored in database' ); } catch ( error ) { this . getLogger (). error ( `Database insertion failed: ${ error } ` ); } } destroy () { if ( this . mongoClient ) { this . mongoClient . close (); } super . destroy (); } } Troubleshooting Common Issues rclnodejs Not Found Symptoms: Cannot find module 'rclnodejs' Solution: Install rclnodejs: npm install rclnodejs ROS 2 Initialization Fails Symptoms: rclnodejs.init() throws error Solution: Ensure ROS 2 environment is sourced and rclnodejs is built Web Server Port Conflicts Symptoms: EADDRINUSE error Solution: Change port number or free the port Memory Leaks Symptoms: Increasing memory usage over time Solution: Ensure proper cleanup of timers, subscriptions, and object pools Debug Tips Use console.log() for debugging (maps to ROS logging) Enable verbose logging: rclnodejs.setLoggerLevel(rclnodejs.LoggingSeverity.DEBUG) Use Node.js debugger: node --inspect lib/index.js Monitor with htop or node --prof for performance issues Performance Considerations Event Loop Blocking // Bad: Blocks event loop this . timer = this . createTimer ( 1000 , () => { const result = this . blockingOperation (); // Blocks for seconds this . publisher . publish ( result ); }); // Good: Use async operations this . timer = this . createTimer ( 1000 , async () => { const result = await this . asyncOperation (); // Non-blocking this . publisher . publish ( result ); }); Memory Management Use object pooling for frequently created objects Avoid closures in hot paths Monitor heap usage with --expose-gc Use streams for large data processing Scaling Considerations Consider clustering for CPU-intensive tasks Use worker threads for blocking operations Implement connection pooling for databases Use Redis for inter-process communication Migration from ROS 1 Key differences when migrating from ROS 1 JavaScript nodes: - Replace rosnodejs with rclnodejs - Update message/service type definitions - Use Promises instead of callbacks where possible - Update QoS settings syntax - Use modern JavaScript features (async/await, destructuring) - Update parameter access methods Contributing To improve the Node.js template: Add more web integration examples Include additional testing patterns Enhance TypeScript support Add performance benchmarks Include more database integration examples See the contributing guide for details on modifying templates.","title":"Node.js ROS 2 Package"},{"location":"nodejs-package.html#nodejs-ros-2-package-template","text":"The Node.js ROS 2 Package template generates ROS 2 nodes using the rclnodejs library, enabling web integration and asynchronous operations in JavaScript/TypeScript.","title":"Node.js ROS 2 Package Template"},{"location":"nodejs-package.html#overview","text":"This template creates Node.js-based ROS 2 nodes with: - Full rclnodejs Integration : Complete ROS 2 functionality in JavaScript - Promise-Based Async : Modern async/await patterns - Web Capabilities : HTTP server integration and REST APIs - TypeScript Support : Optional TypeScript with type definitions - Testing : Jest integration with ROS 2 mocks - Event-Driven : Native Node.js event loop integration","title":"Overview"},{"location":"nodejs-package.html#generated-structure","text":"your_package/ \u251c\u2500\u2500 package.json # Node.js package configuration \u251c\u2500\u2500 tsconfig.json # TypeScript configuration (optional) \u251c\u2500\u2500 package.xml # ROS 2 package manifest \u251c\u2500\u2500 README.md # Package documentation \u251c\u2500\u2500 CONTRIBUTING.md # Development guidelines \u251c\u2500\u2500 Agents.md # AI interaction guide \u251c\u2500\u2500 lib/ \u2502 \u251c\u2500\u2500 index.js # Main entry point \u2502 \u251c\u2500\u2500 your_package_node.js # Main node implementation \u2502 \u2514\u2500\u2500 utils.js # Utility functions \u251c\u2500\u2500 launch/ \u2502 \u2514\u2500\u2500 your_package_node.launch.py # Launch configuration \u251c\u2500\u2500 resource/ \u2502 \u2514\u2500\u2500 your_package # Ament index resource \u251c\u2500\u2500 test/ \u2502 \u251c\u2500\u2500 your_package_node.test.js # Unit tests \u2502 \u2514\u2500\u2500 __mocks__/ # Jest mocks \u2514\u2500\u2500 docs/ \u2514\u2500\u2500 api.md # API documentation","title":"Generated Structure"},{"location":"nodejs-package.html#key-features","text":"","title":"Key Features"},{"location":"nodejs-package.html#promise-based-async-operations","text":"Native Promise support for ROS 2 operations: const rclnodejs = require ( 'rclnodejs' ); class AsyncNode extends rclnodejs . Node { constructor () { super ( 'async_node' ); // Async service client this . client = this . createClient ( 'example_interfaces/srv/AddTwoInts' , 'add_two_ints' ); // Async publisher this . publisher = this . createPublisher ( 'std_msgs/msg/String' , 'chatter' ); // Timer with async callback this . timer = this . createTimer ( 1000 , async () => { await this . publishMessage (); }); } async publishMessage () { const msg = { data : `Hello ROS 2! Time: ${ Date . now () } ` }; await this . publisher . publish ( msg ); this . getLogger (). info ( `Published: ${ msg . data } ` ); } async callService ( a , b ) { const request = { a , b }; try { const response = await this . client . sendRequest ( request ); this . getLogger (). info ( `Result: ${ a } + ${ b } = ${ response . sum } ` ); return response . sum ; } catch ( error ) { this . getLogger (). error ( `Service call failed: ${ error } ` ); throw error ; } } }","title":"Promise-Based Async Operations"},{"location":"nodejs-package.html#web-integration","text":"Built-in HTTP server capabilities: const express = require ( 'express' ); const rclnodejs = require ( 'rclnodejs' ); class WebEnabledNode extends rclnodejs . Node { constructor () { super ( 'web_node' ); // Express app for REST API this . app = express (); this . app . use ( express . json ()); // ROS 2 service this . service = this . createService ( 'std_srvs/srv/Trigger' , 'trigger_service' , this . handleTrigger . bind ( this ) ); // REST endpoints this . app . get ( '/status' , ( req , res ) => { res . json ({ node_name : this . name (), status : 'running' , services : this . getServiceNamesAndTypes () }); }); this . app . post ( '/trigger' , async ( req , res ) => { try { // Call ROS 2 service const result = await this . callTriggerService (); res . json ({ success : true , result }); } catch ( error ) { res . status ( 500 ). json ({ error : error . message }); } }); // Start web server this . server = this . app . listen ( 3000 , () => { this . getLogger (). info ( 'Web server listening on port 3000' ); }); } async handleTrigger ( request , response ) { this . getLogger (). info ( 'Trigger service called' ); // Perform async operation await this . performAsyncTask (); return { success : true , message : 'Trigger executed successfully' }; } destroy () { if ( this . server ) { this . server . close (); } super . destroy (); } }","title":"Web Integration"},{"location":"nodejs-package.html#typescript-support","text":"Optional TypeScript with full type safety: import * as rclnodejs from 'rclnodejs' ; interface PublisherConfig { topicName : string ; messageType : string ; publishRate : number ; } class TypedPublisher extends rclnodejs . Node { private publisher : rclnodejs.Publisher < any > ; private timer : rclnodejs.Timer ; private config : PublisherConfig ; constructor ( config : PublisherConfig ) { super ( 'typed_publisher' ); this . config = config ; this . publisher = this . createPublisher ( config . messageType , config . topicName ); this . timer = this . createTimer ( 1000 / config . publishRate , this . publishCallback . bind ( this ) ); } private publishCallback () : void { const message = this . createMessage (); this . publisher . publish ( message ); this . getLogger (). info ( `Published to ${ this . config . topicName } ` ); } private createMessage () : any { // Type-safe message creation return { data : `Message at ${ new Date (). toISOString () } ` , timestamp : Date.now () }; } }","title":"TypeScript Support"},{"location":"nodejs-package.html#usage-examples","text":"","title":"Usage Examples"},{"location":"nodejs-package.html#basic-publisher","text":"const rclnodejs = require ( 'rclnodejs' ); class MinimalPublisher extends rclnodejs . Node { constructor () { super ( 'minimal_publisher' ); this . publisher = this . createPublisher ( 'std_msgs/msg/String' , 'topic' ); this . timer = this . createTimer ( 500 , () => { this . publishMessage (); }); this . messageCount = 0 ; } publishMessage () { const msg = { data : `Hello World: ${ this . messageCount } ` }; this . publisher . publish ( msg ); this . getLogger (). info ( `Publishing: \" ${ msg . data } \"` ); this . messageCount ++ ; } } async function main () { await rclnodejs . init (); const node = new MinimalPublisher (); rclnodejs . spin ( node ); } main ();","title":"Basic Publisher"},{"location":"nodejs-package.html#service-server","text":"const rclnodejs = require ( 'rclnodejs' ); class MinimalService extends rclnodejs . Node { constructor () { super ( 'minimal_service' ); this . service = this . createService ( 'example_interfaces/srv/AddTwoInts' , 'add_two_ints' , this . addCallback . bind ( this ) ); } addCallback ( request , response ) { this . getLogger (). info ( `Incoming request: ${ request . a } + ${ request . b } ` ); response . sum = request . a + request . b ; return response ; } } async function main () { await rclnodejs . init (); const node = new MinimalService (); rclnodejs . spin ( node ); } main ();","title":"Service Server"},{"location":"nodejs-package.html#action-client","text":"const rclnodejs = require ( 'rclnodejs' ); class FibonacciActionClient extends rclnodejs . Node { constructor () { super ( 'fibonacci_action_client' ); this . actionClient = this . createActionClient ( 'example_interfaces/action/Fibonacci' , 'fibonacci' ); this . actionClient . waitForServer (). then (() => { this . sendGoal (); }); } async sendGoal () { const goal = { order : 10 }; try { const goalHandle = await this . actionClient . sendGoal ( goal ); // Handle feedback goalHandle . on ( 'feedback' , ( feedback ) => { this . getLogger (). info ( `Feedback: ${ feedback . sequence } ` ); }); // Wait for result const result = await goalHandle . getResult (); this . getLogger (). info ( `Result: ${ result . sequence } ` ); } catch ( error ) { this . getLogger (). error ( `Action failed: ${ error } ` ); } } }","title":"Action Client"},{"location":"nodejs-package.html#configuration-options","text":"","title":"Configuration Options"},{"location":"nodejs-package.html#communication-patterns","text":"Publishers : Data broadcasting with QoS settings Subscribers : Event-driven data reception Services : Request-response with Promise support Actions : Long-running task coordination Parameters : Dynamic configuration management","title":"Communication Patterns"},{"location":"nodejs-package.html#quality-of-service-qos","text":"// Define QoS profiles const sensorQoS = { reliability : rclnodejs . QoS . ReliabilityPolicy . BEST_EFFORT , durability : rclnodejs . QoS . DurabilityPolicy . VOLATILE , depth : 10 }; const stateQoS = { reliability : rclnodejs . QoS . ReliabilityPolicy . RELIABLE , durability : rclnodejs . QoS . DurabilityPolicy . TRANSIENT_LOCAL , depth : 1 }; // Use with publishers/subscribers this . publisher = this . createPublisher ( 'sensor_msgs/msg/LaserScan' , 'scan' , sensorQoS ); this . subscriber = this . createSubscription ( 'nav_msgs/msg/Odometry' , 'odom' , stateQoS , callback );","title":"Quality of Service (QoS)"},{"location":"nodejs-package.html#building-and-testing","text":"","title":"Building and Testing"},{"location":"nodejs-package.html#installation","text":"# Install dependencies npm install # Build TypeScript (if used) npm run build # Install ROS 2 package colcon build --packages-select your_package source install/setup.bash","title":"Installation"},{"location":"nodejs-package.html#running-tests","text":"# Run Jest tests npm test # With coverage npm run test:coverage # Using colcon colcon test --packages-select your_package","title":"Running Tests"},{"location":"nodejs-package.html#running-the-node","text":"# Direct execution node lib/index.js # Using ROS 2 launch ros2 launch your_package your_package_node.launch.py # With environment variables NODE_ENV = production node lib/index.js","title":"Running the Node"},{"location":"nodejs-package.html#best-practices","text":"","title":"Best Practices"},{"location":"nodejs-package.html#error-handling","text":"class RobustNode extends rclnodejs . Node { constructor () { super ( 'robust_node' ); // Handle async errors this . setupServices (). catch ( error => { this . getLogger (). error ( `Setup failed: ${ error } ` ); process . exit ( 1 ); }); } async setupServices () { try { this . service = this . createService ( 'std_srvs/srv/Trigger' , 'my_service' , this . handleService . bind ( this ) ); } catch ( error ) { this . getLogger (). error ( `Service creation failed: ${ error } ` ); throw error ; } } handleService ( request , response ) { try { // Service logic with error handling if ( ! this . validateRequest ( request )) { return { success : false , message : 'Invalid request' }; } return { success : true , message : 'Service executed successfully' }; } catch ( error ) { this . getLogger (). error ( `Service error: ${ error } ` ); return { success : false , message : `Internal error: ${ error . message } ` }; } } validateRequest ( request ) { // Validation logic return true ; } }","title":"Error Handling"},{"location":"nodejs-package.html#memory-management","text":"class MemoryEfficientNode extends rclnodejs . Node { constructor () { super ( 'memory_efficient_node' ); // Use object pooling for frequently created objects this . messagePool = []; this . maxPoolSize = 10 ; this . publisher = this . createPublisher ( 'std_msgs/msg/String' , 'topic' ); this . timer = this . createTimer ( 100 , () => { const msg = this . getMessageFromPool (); msg . data = `Message ${ Date . now () } ` ; this . publisher . publish ( msg ); this . returnMessageToPool ( msg ); }); } getMessageFromPool () { return this . messagePool . pop () || { data : '' }; } returnMessageToPool ( message ) { if ( this . messagePool . length < this . maxPoolSize ) { // Reset message message . data = '' ; this . messagePool . push ( message ); } } }","title":"Memory Management"},{"location":"nodejs-package.html#logging","text":"class WellLoggedNode extends rclnodejs . Node { constructor () { super ( 'well_logged_node' ); // Structured logging this . logger = { debug : ( msg , meta = {}) => this . log ( 'DEBUG' , msg , meta ), info : ( msg , meta = {}) => this . log ( 'INFO' , msg , meta ), warn : ( msg , meta = {}) => this . log ( 'WARN' , msg , meta ), error : ( msg , meta = {}) => this . log ( 'ERROR' , msg , meta ) }; } log ( level , message , metadata = {}) { const logEntry = { level , message , timestamp : new Date (). toISOString (), node : this . name (), ... metadata }; this . getLogger (). info ( JSON . stringify ( logEntry )); } async performOperation () { const startTime = Date . now (); try { this . logger . debug ( 'Starting operation' , { operation : 'performOperation' }); // Operation logic await this . doSomething (); const duration = Date . now () - startTime ; this . logger . info ( 'Operation completed' , { operation : 'performOperation' , duration_ms : duration , success : true }); } catch ( error ) { const duration = Date . now () - startTime ; this . logger . error ( 'Operation failed' , { operation : 'performOperation' , duration_ms : duration , error : error . message , success : false }); throw error ; } } }","title":"Logging"},{"location":"nodejs-package.html#testing","text":"","title":"Testing"},{"location":"nodejs-package.html#jest-integration","text":"const rclnodejs = require ( 'rclnodejs' ); describe ( 'PublisherNode' , () => { let node ; beforeAll ( async () => { await rclnodejs . init (); }); afterAll (() => { rclnodejs . shutdown (); }); beforeEach (() => { node = new PublisherNode (); }); afterEach (() => { node . destroy (); }); test ( 'should create publisher' , () => { expect ( node . publisher ). toBeDefined (); expect ( node . publisher . topicName ). toBe ( 'chatter' ); }); test ( 'should publish messages' , ( done ) => { const mockCallback = jest . fn (); const subscription = node . createSubscription ( 'std_msgs/msg/String' , 'chatter' , mockCallback ); // Wait for message setTimeout (() => { expect ( mockCallback ). toHaveBeenCalled (); subscription . destroy (); done (); }, 100 ); }); });","title":"Jest Integration"},{"location":"nodejs-package.html#mocking-ros-2-components","text":"// __mocks__/rclnodejs.js const mockPublisher = { publish : jest . fn (), destroy : jest . fn () }; const mockSubscriber = { destroy : jest . fn () }; const mockService = { destroy : jest . fn () }; module . exports = { init : jest . fn (). mockResolvedValue (), shutdown : jest . fn (), createNode : jest . fn (). mockReturnValue ({ createPublisher : jest . fn (). mockReturnValue ( mockPublisher ), createSubscriber : jest . fn (). mockReturnValue ( mockSubscriber ), createService : jest . fn (). mockReturnValue ( mockService ), destroy : jest . fn () }), QoS : { ReliabilityPolicy : { RELIABLE : 'RELIABLE' , BEST_EFFORT : 'BEST_EFFORT' } } };","title":"Mocking ROS 2 Components"},{"location":"nodejs-package.html#advanced-usage","text":"","title":"Advanced Usage"},{"location":"nodejs-package.html#websocket-integration","text":"const WebSocket = require ( 'ws' ); const rclnodejs = require ( 'rclnodejs' ); class WebSocketNode extends rclnodejs . Node { constructor () { super ( 'websocket_node' ); // ROS 2 subscriber this . subscriber = this . createSubscription ( 'sensor_msgs/msg/Imu' , 'imu' , this . handleImuData . bind ( this ) ); // WebSocket server this . wss = new WebSocket . Server ({ port : 8080 }); this . wss . on ( 'connection' , ( ws ) => { this . getLogger (). info ( 'WebSocket client connected' ); ws . on ( 'message' , ( message ) => { this . handleWebSocketMessage ( ws , message ); }); }); } handleImuData ( msg ) { // Broadcast IMU data to all WebSocket clients const data = JSON . stringify ({ type : 'imu' , data : msg }); this . wss . clients . forEach ( client => { if ( client . readyState === WebSocket . OPEN ) { client . send ( data ); } }); } handleWebSocketMessage ( ws , message ) { try { const data = JSON . parse ( message ); if ( data . type === 'command' ) { // Handle commands from web clients this . processCommand ( data . command ); } } catch ( error ) { this . getLogger (). error ( `Invalid WebSocket message: ${ error } ` ); } } destroy () { if ( this . wss ) { this . wss . close (); } super . destroy (); } }","title":"WebSocket Integration"},{"location":"nodejs-package.html#rest-api-with-express","text":"const express = require ( 'express' ); const rclnodejs = require ( 'rclnodejs' ); class RESTNode extends rclnodejs . Node { constructor () { super ( 'rest_node' ); this . app = express (); this . app . use ( express . json ()); // ROS 2 services this . getStatusService = this . createService ( 'std_srvs/srv/Trigger' , 'get_status' , this . handleGetStatus . bind ( this ) ); this . setParameterService = this . createService ( 'rcl_interfaces/srv/SetParameters' , 'set_parameters' , this . handleSetParameters . bind ( this ) ); // REST endpoints this . setupRoutes (); // Start server this . server = this . app . listen ( 3000 , () => { this . getLogger (). info ( 'REST API listening on port 3000' ); }); } setupRoutes () { // Get node status this . app . get ( '/status' , async ( req , res ) => { try { const status = await this . getNodeStatus (); res . json ( status ); } catch ( error ) { res . status ( 500 ). json ({ error : error . message }); } }); // Set parameters this . app . post ( '/parameters' , async ( req , res ) => { try { const result = await this . setParameters ( req . body ); res . json ( result ); } catch ( error ) { res . status ( 400 ). json ({ error : error . message }); } }); // Get topics this . app . get ( '/topics' , ( req , res ) => { const topics = this . getTopicNamesAndTypes (); res . json ({ topics }); }); } async getNodeStatus () { return { name : this . name (), namespace : this . namespace (), publishers : this . getPublisherNamesAndTypes (), subscribers : this . getSubscriberNamesAndTypes (), services : this . getServiceNamesAndTypes (), uptime : process . uptime () }; } destroy () { if ( this . server ) { this . server . close (); } super . destroy (); } }","title":"REST API with Express"},{"location":"nodejs-package.html#integration-with-databases","text":"const { MongoClient } = require ( 'mongodb' ); const rclnodejs = require ( 'rclnodejs' ); class DatabaseNode extends rclnodejs . Node { constructor () { super ( 'database_node' ); this . mongoClient = null ; this . database = null ; // Initialize database connection this . initDatabase (); // ROS 2 subscriber for data storage this . subscriber = this . createSubscription ( 'sensor_msgs/msg/PointCloud2' , 'pointcloud' , this . handlePointCloud . bind ( this ) ); } async initDatabase () { try { this . mongoClient = new MongoClient ( 'mongodb://localhost:27017' ); await this . mongoClient . connect (); this . database = this . mongoClient . db ( 'ros_data' ); this . getLogger (). info ( 'Connected to MongoDB' ); } catch ( error ) { this . getLogger (). error ( `Database connection failed: ${ error } ` ); } } async handlePointCloud ( msg ) { if ( ! this . database ) { this . getLogger (). warn ( 'Database not connected, skipping data storage' ); return ; } try { const collection = this . database . collection ( 'pointclouds' ); const document = { timestamp : new Date (), topic : 'pointcloud' , data : msg // Store the full ROS message }; await collection . insertOne ( document ); this . getLogger (). info ( 'Point cloud data stored in database' ); } catch ( error ) { this . getLogger (). error ( `Database insertion failed: ${ error } ` ); } } destroy () { if ( this . mongoClient ) { this . mongoClient . close (); } super . destroy (); } }","title":"Integration with Databases"},{"location":"nodejs-package.html#troubleshooting","text":"","title":"Troubleshooting"},{"location":"nodejs-package.html#common-issues","text":"","title":"Common Issues"},{"location":"nodejs-package.html#rclnodejs-not-found","text":"Symptoms: Cannot find module 'rclnodejs' Solution: Install rclnodejs: npm install rclnodejs","title":"rclnodejs Not Found"},{"location":"nodejs-package.html#ros-2-initialization-fails","text":"Symptoms: rclnodejs.init() throws error Solution: Ensure ROS 2 environment is sourced and rclnodejs is built","title":"ROS 2 Initialization Fails"},{"location":"nodejs-package.html#web-server-port-conflicts","text":"Symptoms: EADDRINUSE error Solution: Change port number or free the port","title":"Web Server Port Conflicts"},{"location":"nodejs-package.html#memory-leaks","text":"Symptoms: Increasing memory usage over time Solution: Ensure proper cleanup of timers, subscriptions, and object pools","title":"Memory Leaks"},{"location":"nodejs-package.html#debug-tips","text":"Use console.log() for debugging (maps to ROS logging) Enable verbose logging: rclnodejs.setLoggerLevel(rclnodejs.LoggingSeverity.DEBUG) Use Node.js debugger: node --inspect lib/index.js Monitor with htop or node --prof for performance issues","title":"Debug Tips"},{"location":"nodejs-package.html#performance-considerations","text":"","title":"Performance Considerations"},{"location":"nodejs-package.html#event-loop-blocking","text":"// Bad: Blocks event loop this . timer = this . createTimer ( 1000 , () => { const result = this . blockingOperation (); // Blocks for seconds this . publisher . publish ( result ); }); // Good: Use async operations this . timer = this . createTimer ( 1000 , async () => { const result = await this . asyncOperation (); // Non-blocking this . publisher . publish ( result ); });","title":"Event Loop Blocking"},{"location":"nodejs-package.html#memory-management_1","text":"Use object pooling for frequently created objects Avoid closures in hot paths Monitor heap usage with --expose-gc Use streams for large data processing","title":"Memory Management"},{"location":"nodejs-package.html#scaling-considerations","text":"Consider clustering for CPU-intensive tasks Use worker threads for blocking operations Implement connection pooling for databases Use Redis for inter-process communication","title":"Scaling Considerations"},{"location":"nodejs-package.html#migration-from-ros-1","text":"Key differences when migrating from ROS 1 JavaScript nodes: - Replace rosnodejs with rclnodejs - Update message/service type definitions - Use Promises instead of callbacks where possible - Update QoS settings syntax - Use modern JavaScript features (async/await, destructuring) - Update parameter access methods","title":"Migration from ROS 1"},{"location":"nodejs-package.html#contributing","text":"To improve the Node.js template: Add more web integration examples Include additional testing patterns Enhance TypeScript support Add performance benchmarks Include more database integration examples See the contributing guide for details on modifying templates.","title":"Contributing"},{"location":"python-package.html","text":"Python ROS 2 Package Template The Python ROS 2 Package template generates flexible, prototype-friendly ROS 2 nodes using modern Python practices and the rclpy library. Overview This template creates Python-based ROS 2 nodes with: - Modern Python : Python 3.12+ with type hints and async support - Async/Await : Native asyncio integration for concurrent operations - Rich Ecosystem : Easy integration with scientific computing, ML, and web frameworks - Testing : Comprehensive pytest integration - Documentation : Auto-generated docstrings and type annotations Generated Structure your_package/ \u251c\u2500\u2500 package.xml # ROS 2 package manifest \u251c\u2500\u2500 setup.py # Python package configuration \u251c\u2500\u2500 setup.cfg # Python packaging metadata \u251c\u2500\u2500 README.md # Package documentation \u251c\u2500\u2500 CONTRIBUTING.md # Development guidelines \u251c\u2500\u2500 Agents.md # AI interaction guide \u251c\u2500\u2500 your_package/ \u2502 \u251c\u2500\u2500 __init__.py # Package initialization \u2502 \u251c\u2500\u2500 your_package_node.py # Main node implementation \u2502 \u2514\u2500\u2500 utils.py # Utility functions \u251c\u2500\u2500 launch/ \u2502 \u2514\u2500\u2500 your_package_node.launch.py # Launch configuration \u251c\u2500\u2500 resource/ \u2502 \u2514\u2500\u2500 your_package # Ament index resource \u251c\u2500\u2500 test/ \u2502 \u251c\u2500\u2500 __init__.py # Test package \u2502 \u2514\u2500\u2500 test_your_package_node.py # Unit tests \u2514\u2500\u2500 docs/ \u2514\u2500\u2500 index.md # Package documentation Key Features Async/Await Support Native asyncio integration for concurrent operations: import asyncio import rclpy from rclpy.node import Node class AsyncNode ( Node ): def __init__ ( self ): super () . __init__ ( 'async_node' ) async def run_async_operation ( self ): \"\"\"Example async method\"\"\" await asyncio . sleep ( 1.0 ) self . get_logger () . info ( 'Async operation completed' ) def timer_callback ( self ): \"\"\"Timer callback that can spawn async tasks\"\"\" asyncio . create_task ( self . run_async_operation ()) Type Hints and Documentation Comprehensive type annotations and docstrings: from typing import Optional , List import rclpy from rclpy.node import Node from std_msgs.msg import String class PublisherNode ( Node ): \"\"\"A ROS 2 node that publishes string messages. This node demonstrates basic publishing functionality with configurable message content and publishing rate. \"\"\" def __init__ ( self , topic_name : str = 'chatter' , publish_rate : float = 1.0 ) -> None : \"\"\"Initialize the publisher node. Args: topic_name: Name of the topic to publish to publish_rate: Publishing frequency in Hz \"\"\" super () . __init__ ( 'publisher_node' ) self . publisher : rclpy . publisher . Publisher [ String ] = self . create_publisher ( String , topic_name , 10 ) self . timer : rclpy . timer . Timer = self . create_timer ( 1.0 / publish_rate , self . timer_callback ) self . message_count : int = 0 def timer_callback ( self ) -> None : \"\"\"Publish a message on timer trigger.\"\"\" msg = String () msg . data = f 'Hello ROS 2! Message # { self . message_count } ' self . publisher . publish ( msg ) self . get_logger () . info ( f 'Publishing: \" { msg . data } \"' ) self . message_count += 1 pytest Integration Comprehensive testing with ROS 2 fixtures: import pytest import rclpy from rclpy.node import Node from your_package.your_package_node import PublisherNode class TestPublisherNode : \"\"\"Test cases for PublisherNode.\"\"\" @pytest . fixture def node ( self ): \"\"\"Fixture providing a PublisherNode instance.\"\"\" rclpy . init () node = PublisherNode () yield node node . destroy_node () rclpy . shutdown () def test_node_creation ( self , node ): \"\"\"Test that node is created successfully.\"\"\" assert node . get_name () == 'publisher_node' assert node . publisher is not None def test_parameter_declaration ( self , node ): \"\"\"Test parameter handling.\"\"\" # Test parameter access and modification pass Usage Examples Basic Publisher #!/usr/bin/env python3 import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_publisher' ) self . publisher_ = self . create_publisher ( String , 'topic' , 10 ) timer_period = 0.5 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = f 'Hello World: { self . i } ' self . publisher_ . publish ( msg ) self . get_logger () . info ( f 'Publishing: \" { msg . data } \"' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () rclpy . spin ( minimal_publisher ) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () Service Server #!/usr/bin/env python3 import rclpy from rclpy.node import Node from example_interfaces.srv import AddTwoInts class MinimalService ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_service' ) self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . add_two_ints_callback ) def add_two_ints_callback ( self , request , response ): response . sum = request . a + request . b self . get_logger () . info ( f 'Incoming request: { request . a } + { request . b } = { response . sum } ' ) return response def main ( args = None ): rclpy . init ( args = args ) minimal_service = MinimalService () rclpy . spin ( minimal_service ) minimal_service . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () Async Operations #!/usr/bin/env python3 import asyncio import rclpy from rclpy.node import Node from std_msgs.msg import String class AsyncPublisher ( Node ): def __init__ ( self ): super () . __init__ ( 'async_publisher' ) self . publisher_ = self . create_publisher ( String , 'topic' , 10 ) self . timer = self . create_timer ( 1.0 , self . timer_callback ) def timer_callback ( self ): \"\"\"Timer callback that demonstrates async operations.\"\"\" asyncio . create_task ( self . publish_async ()) async def publish_async ( self ): \"\"\"Async publishing method.\"\"\" # Simulate async I/O operation await asyncio . sleep ( 0.1 ) msg = String () msg . data = 'Async message' self . publisher_ . publish ( msg ) self . get_logger () . info ( 'Published async message' ) def main ( args = None ): rclpy . init ( args = args ) node = AsyncPublisher () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () Configuration Options Communication Patterns Publishers : Data broadcasting with configurable QoS Subscribers : Data reception with callback functions Services : Synchronous request-response communication Actions : Long-running task coordination Parameters : Dynamic configuration management Quality of Service (QoS) from rclpy.qos import QoSProfile , ReliabilityPolicy , DurabilityPolicy # Best effort, volatile QoS for sensor data sensor_qos = QoSProfile ( reliability = ReliabilityPolicy . BEST_EFFORT , durability = DurabilityPolicy . VOLATILE , depth = 10 ) # Reliable, transient local QoS for state data state_qos = QoSProfile ( reliability = ReliabilityPolicy . RELIABLE , durability = DurabilityPolicy . TRANSIENT_LOCAL , depth = 1 ) Building and Testing Installation # Install the package pip install -e . # Or using colcon colcon build --packages-select your_package source install/setup.bash Running Tests # Using pytest directly pytest # Using colcon colcon test --packages-select your_package colcon test-result --verbose Running the Node # Direct execution python -m your_package.your_package_node # Using ROS 2 launch ros2 launch your_package your_package_node.launch.py # Using ros2 run (if executable entry point is configured) ros2 run your_package your_package_node Best Practices Performance Optimization Minimize global interpreter lock (GIL) impact Use numpy for numerical computations Consider multiprocessing for CPU-intensive tasks Use async operations for I/O-bound tasks Error Handling try : # ROS 2 operations pass except rclpy . exceptions . ROSInterruptException : pass # Expected during shutdown except Exception as e : self . get_logger () . error ( f 'Unexpected error: { e } ' ) raise Logging # Use appropriate log levels self . get_logger () . debug ( 'Detailed debugging information' ) self . get_logger () . info ( 'General information messages' ) self . get_logger () . warn ( 'Warning conditions' ) self . get_logger () . error ( 'Error conditions' ) self . get_logger () . fatal ( 'Fatal error conditions' ) Parameter Management # Declare parameters with defaults self . declare_parameter ( 'rate' , 1.0 ) self . declare_parameter ( 'topic_name' , 'default_topic' ) # Access parameters rate = self . get_parameter ( 'rate' ) . value topic = self . get_parameter ( 'topic_name' ) . value # Parameter callbacks for dynamic reconfiguration def parameter_callback ( self , params ): for param in params : if param . name == 'rate' : # Update rate logic pass return SetParametersResult ( successful = True ) self . add_on_set_parameters_callback ( self . parameter_callback ) Integration Examples NumPy Integration import numpy as np from sensor_msgs.msg import PointCloud2 class PointCloudProcessor ( Node ): def __init__ ( self ): super () . __init__ ( 'pointcloud_processor' ) self . subscription = self . create_subscription ( PointCloud2 , 'pointcloud' , self . process_pointcloud , 10 ) def process_pointcloud ( self , msg ): \"\"\"Process point cloud data using NumPy.\"\"\" # Convert ROS message to numpy array points = self . pointcloud2_to_numpy ( msg ) # Perform computations centroids = np . mean ( points , axis = 0 ) self . get_logger () . info ( f 'Centroid: { centroids } ' ) Web Framework Integration from flask import Flask import threading class WebEnabledNode ( Node ): def __init__ ( self ): super () . __init__ ( 'web_node' ) self . app = Flask ( __name__ ) @self . app . route ( '/status' ) def status (): return { 'node_name' : self . get_name (), 'status' : 'running' } # Run Flask in separate thread self . web_thread = threading . Thread ( target = self . app . run ) self . web_thread . daemon = True self . web_thread . start () Troubleshooting Common Issues Import Errors Symptoms: ModuleNotFoundError when running Solution: Ensure package is installed and Python path is correct Async Operation Issues Symptoms: Async operations not working as expected Solution: Ensure proper event loop management and avoid blocking operations Parameter Access Fails Symptoms: Parameter values not updating Solution: Check parameter declaration and callback registration Debug Tips Use rclpy.logging for detailed logging configuration Enable debug logging: ros2 run your_package your_node --ros-args --log-level debug Use Python debugger: import pdb; pdb.set_trace() Profile performance with cProfile Advanced Usage Multi-Threaded Executors import rclpy from rclpy.executors import MultiThreadedExecutor def main ( args = None ): rclpy . init ( args = args ) # Create nodes node1 = Node1 () node2 = Node2 () # Use multi-threaded executor executor = MultiThreadedExecutor ( num_threads = 4 ) executor . add_node ( node1 ) executor . add_node ( node2 ) try : executor . spin () finally : executor . shutdown () node1 . destroy_node () node2 . destroy_node () rclpy . shutdown () Custom Message Types # In setup.py, add message dependencies # In package.xml, add <depend>your_custom_msgs</depend> from your_custom_msgs.msg import CustomMessage class CustomMessageNode ( Node ): def __init__ ( self ): super () . __init__ ( 'custom_node' ) self . publisher_ = self . create_publisher ( CustomMessage , 'custom_topic' , 10 ) Lifecycle Management from rclpy.lifecycle import LifecycleNode , LifecycleState , TransitionCallbackReturn class LifecycleExampleNode ( LifecycleNode ): def __init__ ( self ): super () . __init__ ( 'lifecycle_node' ) def on_configure ( self , state : LifecycleState ) -> TransitionCallbackReturn : self . get_logger () . info ( 'Configuring...' ) # Initialize resources return TransitionCallbackReturn . SUCCESS def on_activate ( self , state : LifecycleState ) -> TransitionCallbackReturn : self . get_logger () . info ( 'Activating...' ) # Start operations return TransitionCallbackReturn . SUCCESS def on_deactivate ( self , state : LifecycleState ) -> TransitionCallbackReturn : self . get_logger () . info ( 'Deactivating...' ) # Stop operations return TransitionCallbackReturn . SUCCESS def on_cleanup ( self , state : LifecycleState ) -> TransitionCallbackReturn : self . get_logger () . info ( 'Cleaning up...' ) # Release resources return TransitionCallbackReturn . SUCCESS def on_shutdown ( self , state : LifecycleState ) -> TransitionCallbackReturn : self . get_logger () . info ( 'Shutting down...' ) # Final cleanup return TransitionCallbackReturn . SUCCESS Migration from ROS 1 Key differences when migrating from ROS 1 Python nodes: - Replace rospy with rclpy - Use Node instead of node handles - Update message/service type imports - Use rclpy.spin() instead of rospy.spin() - Update parameter access methods - Use modern Python features and async patterns Contributing To improve the Python template: Add more async operation examples Include additional testing patterns Enhance type hint coverage Add performance benchmarking Include more integration examples See the contributing guide for details on modifying templates.","title":"Python ROS 2 Package"},{"location":"python-package.html#python-ros-2-package-template","text":"The Python ROS 2 Package template generates flexible, prototype-friendly ROS 2 nodes using modern Python practices and the rclpy library.","title":"Python ROS 2 Package Template"},{"location":"python-package.html#overview","text":"This template creates Python-based ROS 2 nodes with: - Modern Python : Python 3.12+ with type hints and async support - Async/Await : Native asyncio integration for concurrent operations - Rich Ecosystem : Easy integration with scientific computing, ML, and web frameworks - Testing : Comprehensive pytest integration - Documentation : Auto-generated docstrings and type annotations","title":"Overview"},{"location":"python-package.html#generated-structure","text":"your_package/ \u251c\u2500\u2500 package.xml # ROS 2 package manifest \u251c\u2500\u2500 setup.py # Python package configuration \u251c\u2500\u2500 setup.cfg # Python packaging metadata \u251c\u2500\u2500 README.md # Package documentation \u251c\u2500\u2500 CONTRIBUTING.md # Development guidelines \u251c\u2500\u2500 Agents.md # AI interaction guide \u251c\u2500\u2500 your_package/ \u2502 \u251c\u2500\u2500 __init__.py # Package initialization \u2502 \u251c\u2500\u2500 your_package_node.py # Main node implementation \u2502 \u2514\u2500\u2500 utils.py # Utility functions \u251c\u2500\u2500 launch/ \u2502 \u2514\u2500\u2500 your_package_node.launch.py # Launch configuration \u251c\u2500\u2500 resource/ \u2502 \u2514\u2500\u2500 your_package # Ament index resource \u251c\u2500\u2500 test/ \u2502 \u251c\u2500\u2500 __init__.py # Test package \u2502 \u2514\u2500\u2500 test_your_package_node.py # Unit tests \u2514\u2500\u2500 docs/ \u2514\u2500\u2500 index.md # Package documentation","title":"Generated Structure"},{"location":"python-package.html#key-features","text":"","title":"Key Features"},{"location":"python-package.html#asyncawait-support","text":"Native asyncio integration for concurrent operations: import asyncio import rclpy from rclpy.node import Node class AsyncNode ( Node ): def __init__ ( self ): super () . __init__ ( 'async_node' ) async def run_async_operation ( self ): \"\"\"Example async method\"\"\" await asyncio . sleep ( 1.0 ) self . get_logger () . info ( 'Async operation completed' ) def timer_callback ( self ): \"\"\"Timer callback that can spawn async tasks\"\"\" asyncio . create_task ( self . run_async_operation ())","title":"Async/Await Support"},{"location":"python-package.html#type-hints-and-documentation","text":"Comprehensive type annotations and docstrings: from typing import Optional , List import rclpy from rclpy.node import Node from std_msgs.msg import String class PublisherNode ( Node ): \"\"\"A ROS 2 node that publishes string messages. This node demonstrates basic publishing functionality with configurable message content and publishing rate. \"\"\" def __init__ ( self , topic_name : str = 'chatter' , publish_rate : float = 1.0 ) -> None : \"\"\"Initialize the publisher node. Args: topic_name: Name of the topic to publish to publish_rate: Publishing frequency in Hz \"\"\" super () . __init__ ( 'publisher_node' ) self . publisher : rclpy . publisher . Publisher [ String ] = self . create_publisher ( String , topic_name , 10 ) self . timer : rclpy . timer . Timer = self . create_timer ( 1.0 / publish_rate , self . timer_callback ) self . message_count : int = 0 def timer_callback ( self ) -> None : \"\"\"Publish a message on timer trigger.\"\"\" msg = String () msg . data = f 'Hello ROS 2! Message # { self . message_count } ' self . publisher . publish ( msg ) self . get_logger () . info ( f 'Publishing: \" { msg . data } \"' ) self . message_count += 1","title":"Type Hints and Documentation"},{"location":"python-package.html#pytest-integration","text":"Comprehensive testing with ROS 2 fixtures: import pytest import rclpy from rclpy.node import Node from your_package.your_package_node import PublisherNode class TestPublisherNode : \"\"\"Test cases for PublisherNode.\"\"\" @pytest . fixture def node ( self ): \"\"\"Fixture providing a PublisherNode instance.\"\"\" rclpy . init () node = PublisherNode () yield node node . destroy_node () rclpy . shutdown () def test_node_creation ( self , node ): \"\"\"Test that node is created successfully.\"\"\" assert node . get_name () == 'publisher_node' assert node . publisher is not None def test_parameter_declaration ( self , node ): \"\"\"Test parameter handling.\"\"\" # Test parameter access and modification pass","title":"pytest Integration"},{"location":"python-package.html#usage-examples","text":"","title":"Usage Examples"},{"location":"python-package.html#basic-publisher","text":"#!/usr/bin/env python3 import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_publisher' ) self . publisher_ = self . create_publisher ( String , 'topic' , 10 ) timer_period = 0.5 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = f 'Hello World: { self . i } ' self . publisher_ . publish ( msg ) self . get_logger () . info ( f 'Publishing: \" { msg . data } \"' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () rclpy . spin ( minimal_publisher ) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Basic Publisher"},{"location":"python-package.html#service-server","text":"#!/usr/bin/env python3 import rclpy from rclpy.node import Node from example_interfaces.srv import AddTwoInts class MinimalService ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_service' ) self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . add_two_ints_callback ) def add_two_ints_callback ( self , request , response ): response . sum = request . a + request . b self . get_logger () . info ( f 'Incoming request: { request . a } + { request . b } = { response . sum } ' ) return response def main ( args = None ): rclpy . init ( args = args ) minimal_service = MinimalService () rclpy . spin ( minimal_service ) minimal_service . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Service Server"},{"location":"python-package.html#async-operations","text":"#!/usr/bin/env python3 import asyncio import rclpy from rclpy.node import Node from std_msgs.msg import String class AsyncPublisher ( Node ): def __init__ ( self ): super () . __init__ ( 'async_publisher' ) self . publisher_ = self . create_publisher ( String , 'topic' , 10 ) self . timer = self . create_timer ( 1.0 , self . timer_callback ) def timer_callback ( self ): \"\"\"Timer callback that demonstrates async operations.\"\"\" asyncio . create_task ( self . publish_async ()) async def publish_async ( self ): \"\"\"Async publishing method.\"\"\" # Simulate async I/O operation await asyncio . sleep ( 0.1 ) msg = String () msg . data = 'Async message' self . publisher_ . publish ( msg ) self . get_logger () . info ( 'Published async message' ) def main ( args = None ): rclpy . init ( args = args ) node = AsyncPublisher () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Async Operations"},{"location":"python-package.html#configuration-options","text":"","title":"Configuration Options"},{"location":"python-package.html#communication-patterns","text":"Publishers : Data broadcasting with configurable QoS Subscribers : Data reception with callback functions Services : Synchronous request-response communication Actions : Long-running task coordination Parameters : Dynamic configuration management","title":"Communication Patterns"},{"location":"python-package.html#quality-of-service-qos","text":"from rclpy.qos import QoSProfile , ReliabilityPolicy , DurabilityPolicy # Best effort, volatile QoS for sensor data sensor_qos = QoSProfile ( reliability = ReliabilityPolicy . BEST_EFFORT , durability = DurabilityPolicy . VOLATILE , depth = 10 ) # Reliable, transient local QoS for state data state_qos = QoSProfile ( reliability = ReliabilityPolicy . RELIABLE , durability = DurabilityPolicy . TRANSIENT_LOCAL , depth = 1 )","title":"Quality of Service (QoS)"},{"location":"python-package.html#building-and-testing","text":"","title":"Building and Testing"},{"location":"python-package.html#installation","text":"# Install the package pip install -e . # Or using colcon colcon build --packages-select your_package source install/setup.bash","title":"Installation"},{"location":"python-package.html#running-tests","text":"# Using pytest directly pytest # Using colcon colcon test --packages-select your_package colcon test-result --verbose","title":"Running Tests"},{"location":"python-package.html#running-the-node","text":"# Direct execution python -m your_package.your_package_node # Using ROS 2 launch ros2 launch your_package your_package_node.launch.py # Using ros2 run (if executable entry point is configured) ros2 run your_package your_package_node","title":"Running the Node"},{"location":"python-package.html#best-practices","text":"","title":"Best Practices"},{"location":"python-package.html#performance-optimization","text":"Minimize global interpreter lock (GIL) impact Use numpy for numerical computations Consider multiprocessing for CPU-intensive tasks Use async operations for I/O-bound tasks","title":"Performance Optimization"},{"location":"python-package.html#error-handling","text":"try : # ROS 2 operations pass except rclpy . exceptions . ROSInterruptException : pass # Expected during shutdown except Exception as e : self . get_logger () . error ( f 'Unexpected error: { e } ' ) raise","title":"Error Handling"},{"location":"python-package.html#logging","text":"# Use appropriate log levels self . get_logger () . debug ( 'Detailed debugging information' ) self . get_logger () . info ( 'General information messages' ) self . get_logger () . warn ( 'Warning conditions' ) self . get_logger () . error ( 'Error conditions' ) self . get_logger () . fatal ( 'Fatal error conditions' )","title":"Logging"},{"location":"python-package.html#parameter-management","text":"# Declare parameters with defaults self . declare_parameter ( 'rate' , 1.0 ) self . declare_parameter ( 'topic_name' , 'default_topic' ) # Access parameters rate = self . get_parameter ( 'rate' ) . value topic = self . get_parameter ( 'topic_name' ) . value # Parameter callbacks for dynamic reconfiguration def parameter_callback ( self , params ): for param in params : if param . name == 'rate' : # Update rate logic pass return SetParametersResult ( successful = True ) self . add_on_set_parameters_callback ( self . parameter_callback )","title":"Parameter Management"},{"location":"python-package.html#integration-examples","text":"","title":"Integration Examples"},{"location":"python-package.html#numpy-integration","text":"import numpy as np from sensor_msgs.msg import PointCloud2 class PointCloudProcessor ( Node ): def __init__ ( self ): super () . __init__ ( 'pointcloud_processor' ) self . subscription = self . create_subscription ( PointCloud2 , 'pointcloud' , self . process_pointcloud , 10 ) def process_pointcloud ( self , msg ): \"\"\"Process point cloud data using NumPy.\"\"\" # Convert ROS message to numpy array points = self . pointcloud2_to_numpy ( msg ) # Perform computations centroids = np . mean ( points , axis = 0 ) self . get_logger () . info ( f 'Centroid: { centroids } ' )","title":"NumPy Integration"},{"location":"python-package.html#web-framework-integration","text":"from flask import Flask import threading class WebEnabledNode ( Node ): def __init__ ( self ): super () . __init__ ( 'web_node' ) self . app = Flask ( __name__ ) @self . app . route ( '/status' ) def status (): return { 'node_name' : self . get_name (), 'status' : 'running' } # Run Flask in separate thread self . web_thread = threading . Thread ( target = self . app . run ) self . web_thread . daemon = True self . web_thread . start ()","title":"Web Framework Integration"},{"location":"python-package.html#troubleshooting","text":"","title":"Troubleshooting"},{"location":"python-package.html#common-issues","text":"","title":"Common Issues"},{"location":"python-package.html#import-errors","text":"Symptoms: ModuleNotFoundError when running Solution: Ensure package is installed and Python path is correct","title":"Import Errors"},{"location":"python-package.html#async-operation-issues","text":"Symptoms: Async operations not working as expected Solution: Ensure proper event loop management and avoid blocking operations","title":"Async Operation Issues"},{"location":"python-package.html#parameter-access-fails","text":"Symptoms: Parameter values not updating Solution: Check parameter declaration and callback registration","title":"Parameter Access Fails"},{"location":"python-package.html#debug-tips","text":"Use rclpy.logging for detailed logging configuration Enable debug logging: ros2 run your_package your_node --ros-args --log-level debug Use Python debugger: import pdb; pdb.set_trace() Profile performance with cProfile","title":"Debug Tips"},{"location":"python-package.html#advanced-usage","text":"","title":"Advanced Usage"},{"location":"python-package.html#multi-threaded-executors","text":"import rclpy from rclpy.executors import MultiThreadedExecutor def main ( args = None ): rclpy . init ( args = args ) # Create nodes node1 = Node1 () node2 = Node2 () # Use multi-threaded executor executor = MultiThreadedExecutor ( num_threads = 4 ) executor . add_node ( node1 ) executor . add_node ( node2 ) try : executor . spin () finally : executor . shutdown () node1 . destroy_node () node2 . destroy_node () rclpy . shutdown ()","title":"Multi-Threaded Executors"},{"location":"python-package.html#custom-message-types","text":"# In setup.py, add message dependencies # In package.xml, add <depend>your_custom_msgs</depend> from your_custom_msgs.msg import CustomMessage class CustomMessageNode ( Node ): def __init__ ( self ): super () . __init__ ( 'custom_node' ) self . publisher_ = self . create_publisher ( CustomMessage , 'custom_topic' , 10 )","title":"Custom Message Types"},{"location":"python-package.html#lifecycle-management","text":"from rclpy.lifecycle import LifecycleNode , LifecycleState , TransitionCallbackReturn class LifecycleExampleNode ( LifecycleNode ): def __init__ ( self ): super () . __init__ ( 'lifecycle_node' ) def on_configure ( self , state : LifecycleState ) -> TransitionCallbackReturn : self . get_logger () . info ( 'Configuring...' ) # Initialize resources return TransitionCallbackReturn . SUCCESS def on_activate ( self , state : LifecycleState ) -> TransitionCallbackReturn : self . get_logger () . info ( 'Activating...' ) # Start operations return TransitionCallbackReturn . SUCCESS def on_deactivate ( self , state : LifecycleState ) -> TransitionCallbackReturn : self . get_logger () . info ( 'Deactivating...' ) # Stop operations return TransitionCallbackReturn . SUCCESS def on_cleanup ( self , state : LifecycleState ) -> TransitionCallbackReturn : self . get_logger () . info ( 'Cleaning up...' ) # Release resources return TransitionCallbackReturn . SUCCESS def on_shutdown ( self , state : LifecycleState ) -> TransitionCallbackReturn : self . get_logger () . info ( 'Shutting down...' ) # Final cleanup return TransitionCallbackReturn . SUCCESS","title":"Lifecycle Management"},{"location":"python-package.html#migration-from-ros-1","text":"Key differences when migrating from ROS 1 Python nodes: - Replace rospy with rclpy - Use Node instead of node handles - Update message/service type imports - Use rclpy.spin() instead of rospy.spin() - Update parameter access methods - Use modern Python features and async patterns","title":"Migration from ROS 1"},{"location":"python-package.html#contributing","text":"To improve the Python template: Add more async operation examples Include additional testing patterns Enhance type hint coverage Add performance benchmarking Include more integration examples See the contributing guide for details on modifying templates.","title":"Contributing"},{"location":"resource-package.html","text":"Resource Package Template The Resource Package template generates ROS 2 packages focused on configuration files, URDF descriptions, launch files, and other non-executable resources. Overview This template creates resource-focused ROS 2 packages containing: - URDF Robot Descriptions : XML files defining robot kinematics and properties - Launch Configurations : Python launch files for starting multiple nodes - Mesh Assets : 3D model files for visualization - Configuration Files : YAML/JSON parameter files - Documentation : README and configuration guides - RViz Configurations : View configurations for robot visualization Generated Structure your_package/ \u251c\u2500\u2500 package.xml # ROS 2 package manifest \u251c\u2500\u2500 CMakeLists.txt # Minimal CMake configuration \u251c\u2500\u2500 README.md # Package documentation \u251c\u2500\u2500 CONTRIBUTING.md # Development guidelines \u251c\u2500\u2500 Agents.md # AI interaction guide \u251c\u2500\u2500 urdf/ \u2502 \u251c\u2500\u2500 robot.urdf # Robot description file \u2502 \u2514\u2500\u2500 robot.xacro # Xacro parameterized description \u251c\u2500\u2500 meshes/ \u2502 \u2514\u2500\u2500 robot/ \u2502 \u251c\u2500\u2500 base_link.stl # 3D mesh files \u2502 \u2514\u2500\u2500 link1.stl \u251c\u2500\u2500 launch/ \u2502 \u251c\u2500\u2500 display.launch.py # RViz display launch \u2502 \u251c\u2500\u2500 gazebo.launch.py # Gazebo simulation launch \u2502 \u2514\u2500\u2500 robot.launch.py # Complete robot bringup \u251c\u2500\u2500 config/ \u2502 \u251c\u2500\u2500 controllers.yaml # Controller configurations \u2502 \u251c\u2500\u2500 joint_limits.yaml # Joint limit definitions \u2502 \u2514\u2500\u2500 rviz_config.rviz # RViz visualization config \u251c\u2500\u2500 resource/ \u2502 \u2514\u2500\u2500 your_package # Ament index resource \u2514\u2500\u2500 docs/ \u2514\u2500\u2500 setup.md # Setup and usage instructions Key Features URDF Robot Description Complete robot description with kinematics: <?xml version=\"1.0\"?> <robot name= \"your_robot\" > <!-- Links define the rigid bodies --> <link name= \"base_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.5 0.5 0.1\" /> </geometry> <material name= \"gray\" > <color rgba= \"0.5 0.5 0.5 1.0\" /> </material> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.5 0.5 0.1\" /> </geometry> </collision> </link> <!-- Joints define the connections between links --> <joint name= \"joint1\" type= \"revolute\" > <parent link= \"base_link\" /> <child link= \"link1\" /> <origin xyz= \"0 0 0.1\" rpy= \"0 0 0\" /> <axis xyz= \"0 0 1\" /> <limit lower= \"-3.14159\" upper= \"3.14159\" effort= \"100\" velocity= \"1.0\" /> </joint> <!-- Additional links and joints --> <link name= \"link1\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder radius= \"0.05\" length= \"0.3\" /> </geometry> </visual> </link> </robot> Xacro Parameterized Descriptions Modular robot descriptions with parameters: <?xml version=\"1.0\"?> <robot name= \"your_robot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- Property definitions --> <xacro:property name= \"robot_name\" value= \"my_robot\" /> <xacro:property name= \"base_link_length\" value= \"0.5\" /> <xacro:property name= \"joint_effort\" value= \"100\" /> <xacro:property name= \"joint_velocity\" value= \"1.0\" /> <!-- Macro definitions --> <xacro:macro name= \"joint_with_limits\" params= \"name type parent child xyz rpy axis\" > <joint name= \"${name}\" type= \"${type}\" > <parent link= \"${parent}\" /> <child link= \"${child}\" /> <origin xyz= \"${xyz}\" rpy= \"${rpy}\" /> <axis xyz= \"${axis}\" /> <limit effort= \"${joint_effort}\" velocity= \"${joint_velocity}\" lower= \"-3.14159\" upper= \"3.14159\" /> </joint> </xacro:macro> <!-- Base link --> <link name= \"base_link\" > <visual> <geometry> <box size= \"${base_link_length} ${base_link_length} 0.1\" /> </geometry> <material name= \"blue\" > <color rgba= \"0.2 0.2 0.8 1.0\" /> </material> </visual> </link> <!-- Use the macro --> <xacro:joint_with_limits name= \"joint1\" type= \"revolute\" parent= \"base_link\" child= \"link1\" xyz= \"0 0 0.1\" rpy= \"0 0 0\" axis= \"0 0 1\" /> <!-- Include other files --> <xacro:include filename= \"$(find your_package)/urdf/common_links.urdf.xacro\" /> </robot> Launch Files Python launch configurations for complex setups: import os import launch import launch_ros from launch import LaunchDescription from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node from launch.actions import DeclareLaunchArgument , IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource def generate_launch_description (): # Declare launch arguments use_sim_time = DeclareLaunchArgument ( 'use_sim_time' , default_value = 'false' , description = 'Use simulation time' ) robot_name = DeclareLaunchArgument ( 'robot_name' , default_value = 'your_robot' , description = 'Name of the robot' ) # Robot state publisher robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'screen' , parameters = [{ 'robot_description' : launch . substitutions . Command ([ 'xacro ' , launch . substitutions . FindPackageShare ( 'your_package' ), '/urdf/robot.urdf.xacro robot_name:=' , LaunchConfiguration ( 'robot_name' ) ]), 'use_sim_time' : LaunchConfiguration ( 'use_sim_time' ) }] ) # Joint state publisher joint_state_publisher = Node ( package = 'joint_state_publisher_gui' , executable = 'joint_state_publisher_gui' , name = 'joint_state_publisher_gui' , output = 'screen' , parameters = [{ 'use_sim_time' : LaunchConfiguration ( 'use_sim_time' ) }] ) # RViz rviz = Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , output = 'screen' , arguments = [ '-d' , launch . substitutions . PathJoinSubstitution ([ launch . substitutions . FindPackageShare ( 'your_package' ), 'config' , 'rviz_config.rviz' ])] ) return LaunchDescription ([ use_sim_time , robot_name , robot_state_publisher , joint_state_publisher , rviz ]) RViz Configuration Visualization setup for robot monitoring: # RViz configuration for robot visualization Panels : - Class : rviz_common/Displays Name : Displays Property Tree Widget : Splitter Ratio : 0.5 - Class : rviz_common/Views Name : Views Property Tree Widget : Splitter Ratio : 0.5 Visualization Manager : Class : \"\" Displays : - Class : rviz_default_plugins/RobotModel Name : RobotModel Value : true Robot Description : robot_description TF Prefix : \"\" - Class : rviz_default_plugins/TF Name : TF Value : true Show Names : true Show Axes : true Show Arrows : true Marker Scale : 1.0 - Class : rviz_default_plugins/LaserScan Name : LaserScan Value : true Topic : /scan Size (m) : 0.1 Color : 255; 0; 0 - Class : rviz_default_plugins/Grid Name : Grid Value : true Cell Size : 1.0 Color : 160; 160; 164 Global Options : Background Color : 48; 48; 48 Frame Rate : 30 Fixed Frame : base_link Tools : - Class : rviz_default_plugins/Interact Value : true - Class : rviz_default_plugins/MoveCamera Value : true - Class : rviz_default_plugins/Select Value : true Views : - Class : \"\" Name : Current View Type : rviz_default_plugins/Orbit Value : true Distance : 5.0 Focal Point : X : 0.0 Y : 0.0 Z : 0.0 Pitch : 0.0 Yaw : 0.0 Usage Examples Basic Robot Description <?xml version=\"1.0\"?> <robot name= \"simple_robot\" > <!-- Base link --> <link name= \"base_link\" > <visual> <geometry> <cylinder radius= \"0.1\" length= \"0.2\" /> </geometry> <material name= \"red\" > <color rgba= \"1.0 0.0 0.0 1.0\" /> </material> </visual> </link> <!-- Wheel links --> <link name= \"wheel_left\" > <visual> <geometry> <cylinder radius= \"0.05\" length= \"0.05\" /> </geometry> </visual> </link> <link name= \"wheel_right\" > <visual> <geometry> <cylinder radius= \"0.05\" length= \"0.05\" /> </geometry> </visual> </link> <!-- Joints --> <joint name= \"wheel_left_joint\" type= \"continuous\" > <parent link= \"base_link\" /> <child link= \"wheel_left\" /> <origin xyz= \"-0.1 0.1 0\" rpy= \"1.5708 0 0\" /> <axis xyz= \"0 1 0\" /> </joint> <joint name= \"wheel_right_joint\" type= \"continuous\" > <parent link= \"base_link\" /> <child link= \"wheel_right\" /> <origin xyz= \"-0.1 -0.1 0\" rpy= \"1.5708 0 0\" /> <axis xyz= \"0 1 0\" /> </joint> </robot> Controller Configuration YAML configuration for robot controllers: controller_manager : ros__parameters : update_rate : 100 # Hz joint_state_broadcaster : type : joint_state_broadcaster/JointStateBroadcaster diff_drive_controller : type : diff_drive_controller/DiffDriveController diff_drive_controller : ros__parameters : left_wheel_names : [ \"wheel_left_joint\" ] right_wheel_names : [ \"wheel_right_joint\" ] wheel_separation : 0.2 wheel_radius : 0.05 use_stamped_vel : false publish_limited_velocity : true velocity_rolling_window_size : 10 publish_rate : 50.0 open_loop : true enable_odom_tf : true cmd_vel_timeout : 0.5 publish_tf : true odom_frame_id : \"odom\" base_frame_id : \"base_link\" pose_covariance_diagonal : [ 0.001 , 0.001 , 0.001 , 0.001 , 0.001 , 0.001 ] twist_covariance_diagonal : [ 0.001 , 0.001 , 0.001 , 0.001 , 0.001 , 0.001 ] # Limits linear.x.has_velocity_limits : true linear.x.has_acceleration_limits : true linear.x.has_jerk_limits : false linear.x.max_velocity : 1.0 linear.x.min_velocity : -1.0 linear.x.max_acceleration : 2.0 linear.x.min_acceleration : -2.0 angular.z.has_velocity_limits : true angular.z.has_acceleration_limits : true angular.z.has_jerk_limits : false angular.z.max_velocity : 3.0 angular.z.min_velocity : -3.0 angular.z.max_acceleration : 6.0 angular.z.min_acceleration : -6.0 Gazebo Simulation Launch Launch file for Gazebo simulation: import os import launch import launch_ros from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , ExecuteProcess , IncludeLaunchDescription from launch.conditions import IfCondition from launch.substitutions import LaunchConfiguration , PathJoinSubstitution from launch_ros.actions import Node from launch_ros.substitutions import FindPackageShare def generate_launch_description (): # Declare arguments world = DeclareLaunchArgument ( 'world' , default_value = 'worlds/empty.world' , description = 'Gazebo world file' ) # Gazebo launch gazebo = IncludeLaunchDescription ( PathJoinSubstitution ([ FindPackageShare ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' ]), launch_arguments = { 'world' : LaunchConfiguration ( 'world' ) } . items () ) # Robot state publisher robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , parameters = [{ 'robot_description' : launch . substitutions . Command ([ 'xacro ' , PathJoinSubstitution ([ FindPackageShare ( 'your_package' ), 'urdf' , 'robot.urdf.xacro' ]) ]) }] ) # Spawn robot in Gazebo spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , '/robot_description' , '-entity' , 'my_robot' ] ) # Controller manager controller_manager = Node ( package = 'controller_manager' , executable = 'ros2_control_node' , parameters = [ PathJoinSubstitution ([ FindPackageShare ( 'your_package' ), 'config' , 'controllers.yaml' ]) ] ) # Load controllers load_joint_state_controller = ExecuteProcess ( cmd = [ 'ros2' , 'control' , 'load_controller' , '--set-state' , 'active' , 'joint_state_broadcaster' ], output = 'screen' ) load_diff_drive_controller = ExecuteProcess ( cmd = [ 'ros2' , 'control' , 'load_controller' , '--set-state' , 'active' , 'diff_drive_controller' ], output = 'screen' ) return LaunchDescription ([ world , gazebo , robot_state_publisher , spawn_entity , controller_manager , load_joint_state_controller , load_diff_drive_controller ]) Configuration Options Robot Description Features Links : Define rigid bodies with visual, collision, and inertial properties Joints : Specify connections between links (revolute, prismatic, fixed, etc.) Materials : Define colors and textures for visualization Transmissions : Configure actuator interfaces Gazebo Extensions : Simulation-specific properties Launch Configuration Options Composable Nodes : Load components into existing processes Lifecycle Management : Control node startup sequences Parameter Files : Load YAML configuration files Event Handlers : Respond to process events Conditional Execution : Enable/disable components based on arguments Asset Organization Meshes : STL, OBJ, DAE files for 3D visualization Textures : Image files for material properties CAD Files : Source files for mesh generation Documentation : Setup guides and configuration references Building and Installation Package Installation # Build the package colcon build --packages-select your_package # Source the workspace source install/setup.bash # Verify installation ros2 pkg list | grep your_package Testing URDF # Check URDF syntax check_urdf urdf/robot.urdf # View in RViz ros2 launch your_package display.launch.py # Validate Xacro xacro urdf/robot.urdf.xacro Launch File Testing # Test launch file syntax ros2 launch your_package robot.launch.py --show-args # Dry run (don't actually start processes) ros2 launch your_package robot.launch.py --non-interactive Best Practices URDF Design Use consistent naming conventions Include collision geometries for navigation Define appropriate joint limits Use Xacro for complex robots Include inertial properties for simulation Launch File Organization Use descriptive argument names Include default values for all arguments Group related nodes logically Use conditional includes for optional components Document launch arguments File Organization Keep related files together Use descriptive directory names Include README files for complex configurations Version control large assets appropriately Integration with Other Packages Using Resource Packages # In another package's launch file from launch_ros.substitutions import FindPackageShare # Include robot description robot_description_launch = IncludeLaunchDescription ( PathJoinSubstitution ([ FindPackageShare ( 'robot_description_package' ), 'launch' , 'description.launch.py' ]) ) Parameter Files # Load parameters from resource package config_file = PathJoinSubstitution ([ FindPackageShare ( 'robot_config_package' ), 'config' , 'robot_config.yaml' ]) node = Node ( package = 'robot_control' , executable = 'robot_controller' , parameters = [ config_file ] ) Troubleshooting Common Issues URDF Parsing Errors Symptoms: check_urdf reports syntax errors Solution: Validate XML syntax and check for missing required attributes Launch File Failures Symptoms: Launch fails with import errors Solution: Check Python path and ensure all dependencies are installed RViz Display Issues Symptoms: Robot not showing in RViz Solution: Verify TF tree and robot_description parameter Gazebo Spawn Failures Symptoms: Robot not appearing in Gazebo Solution: Check model format and spawn arguments Debug Tips Use ros2 launch --debug for detailed launch output Enable Gazebo verbose logging: gzserver --verbose Use ros2 doctor to check system health Validate URDF with urdf_to_graphiz for visualization Advanced Usage Modular Robot Descriptions <!-- common_links.urdf.xacro --> <xacro:macro name= \"wheel_link\" params= \"name radius length color\" > <link name= \"${name}\" > <visual> <geometry> <cylinder radius= \"${radius}\" length= \"${length}\" /> </geometry> <material name= \"${color}_material\" > <color rgba= \"${color}\" /> </material> </visual> <collision> <geometry> <cylinder radius= \"${radius}\" length= \"${length}\" /> </geometry> </collision> </link> </xacro:macro> Dynamic Launch Configurations def generate_launch_description (): # Dynamic node creation based on configuration nodes = [] # Load configuration config = load_yaml_config ( 'robot_config.yaml' ) for sensor in config [ 'sensors' ]: node = Node ( package = sensor [ 'package' ], executable = sensor [ 'executable' ], name = sensor [ 'name' ], parameters = [ sensor [ 'params' ]] ) nodes . append ( node ) return LaunchDescription ( nodes ) Multi-Robot Scenarios def generate_launch_description (): robots = [ 'robot1' , 'robot2' , 'robot3' ] nodes = [] for robot in robots : # Robot state publisher for each robot rsp = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = f 'rsp_ { robot } ' , namespace = robot , parameters = [{ 'robot_description' : get_robot_description ( robot ), 'frame_prefix' : f ' { robot } /' }] ) nodes . append ( rsp ) return LaunchDescription ( nodes ) Migration from ROS 1 Key differences when migrating resource packages: - Update URDF syntax for ROS 2 conventions - Convert launch files from XML to Python - Update parameter file formats - Use new RViz configuration format - Update Gazebo integration methods - Use ament instead of catkin Contributing To improve the resource template: Add more URDF examples for different robot types Include additional launch file patterns Add more RViz configuration examples Include simulation-specific configurations Add validation tools and best practices See the contributing guide for details on modifying templates.","title":"Resource Package"},{"location":"resource-package.html#resource-package-template","text":"The Resource Package template generates ROS 2 packages focused on configuration files, URDF descriptions, launch files, and other non-executable resources.","title":"Resource Package Template"},{"location":"resource-package.html#overview","text":"This template creates resource-focused ROS 2 packages containing: - URDF Robot Descriptions : XML files defining robot kinematics and properties - Launch Configurations : Python launch files for starting multiple nodes - Mesh Assets : 3D model files for visualization - Configuration Files : YAML/JSON parameter files - Documentation : README and configuration guides - RViz Configurations : View configurations for robot visualization","title":"Overview"},{"location":"resource-package.html#generated-structure","text":"your_package/ \u251c\u2500\u2500 package.xml # ROS 2 package manifest \u251c\u2500\u2500 CMakeLists.txt # Minimal CMake configuration \u251c\u2500\u2500 README.md # Package documentation \u251c\u2500\u2500 CONTRIBUTING.md # Development guidelines \u251c\u2500\u2500 Agents.md # AI interaction guide \u251c\u2500\u2500 urdf/ \u2502 \u251c\u2500\u2500 robot.urdf # Robot description file \u2502 \u2514\u2500\u2500 robot.xacro # Xacro parameterized description \u251c\u2500\u2500 meshes/ \u2502 \u2514\u2500\u2500 robot/ \u2502 \u251c\u2500\u2500 base_link.stl # 3D mesh files \u2502 \u2514\u2500\u2500 link1.stl \u251c\u2500\u2500 launch/ \u2502 \u251c\u2500\u2500 display.launch.py # RViz display launch \u2502 \u251c\u2500\u2500 gazebo.launch.py # Gazebo simulation launch \u2502 \u2514\u2500\u2500 robot.launch.py # Complete robot bringup \u251c\u2500\u2500 config/ \u2502 \u251c\u2500\u2500 controllers.yaml # Controller configurations \u2502 \u251c\u2500\u2500 joint_limits.yaml # Joint limit definitions \u2502 \u2514\u2500\u2500 rviz_config.rviz # RViz visualization config \u251c\u2500\u2500 resource/ \u2502 \u2514\u2500\u2500 your_package # Ament index resource \u2514\u2500\u2500 docs/ \u2514\u2500\u2500 setup.md # Setup and usage instructions","title":"Generated Structure"},{"location":"resource-package.html#key-features","text":"","title":"Key Features"},{"location":"resource-package.html#urdf-robot-description","text":"Complete robot description with kinematics: <?xml version=\"1.0\"?> <robot name= \"your_robot\" > <!-- Links define the rigid bodies --> <link name= \"base_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.5 0.5 0.1\" /> </geometry> <material name= \"gray\" > <color rgba= \"0.5 0.5 0.5 1.0\" /> </material> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.5 0.5 0.1\" /> </geometry> </collision> </link> <!-- Joints define the connections between links --> <joint name= \"joint1\" type= \"revolute\" > <parent link= \"base_link\" /> <child link= \"link1\" /> <origin xyz= \"0 0 0.1\" rpy= \"0 0 0\" /> <axis xyz= \"0 0 1\" /> <limit lower= \"-3.14159\" upper= \"3.14159\" effort= \"100\" velocity= \"1.0\" /> </joint> <!-- Additional links and joints --> <link name= \"link1\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder radius= \"0.05\" length= \"0.3\" /> </geometry> </visual> </link> </robot>","title":"URDF Robot Description"},{"location":"resource-package.html#xacro-parameterized-descriptions","text":"Modular robot descriptions with parameters: <?xml version=\"1.0\"?> <robot name= \"your_robot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- Property definitions --> <xacro:property name= \"robot_name\" value= \"my_robot\" /> <xacro:property name= \"base_link_length\" value= \"0.5\" /> <xacro:property name= \"joint_effort\" value= \"100\" /> <xacro:property name= \"joint_velocity\" value= \"1.0\" /> <!-- Macro definitions --> <xacro:macro name= \"joint_with_limits\" params= \"name type parent child xyz rpy axis\" > <joint name= \"${name}\" type= \"${type}\" > <parent link= \"${parent}\" /> <child link= \"${child}\" /> <origin xyz= \"${xyz}\" rpy= \"${rpy}\" /> <axis xyz= \"${axis}\" /> <limit effort= \"${joint_effort}\" velocity= \"${joint_velocity}\" lower= \"-3.14159\" upper= \"3.14159\" /> </joint> </xacro:macro> <!-- Base link --> <link name= \"base_link\" > <visual> <geometry> <box size= \"${base_link_length} ${base_link_length} 0.1\" /> </geometry> <material name= \"blue\" > <color rgba= \"0.2 0.2 0.8 1.0\" /> </material> </visual> </link> <!-- Use the macro --> <xacro:joint_with_limits name= \"joint1\" type= \"revolute\" parent= \"base_link\" child= \"link1\" xyz= \"0 0 0.1\" rpy= \"0 0 0\" axis= \"0 0 1\" /> <!-- Include other files --> <xacro:include filename= \"$(find your_package)/urdf/common_links.urdf.xacro\" /> </robot>","title":"Xacro Parameterized Descriptions"},{"location":"resource-package.html#launch-files","text":"Python launch configurations for complex setups: import os import launch import launch_ros from launch import LaunchDescription from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node from launch.actions import DeclareLaunchArgument , IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource def generate_launch_description (): # Declare launch arguments use_sim_time = DeclareLaunchArgument ( 'use_sim_time' , default_value = 'false' , description = 'Use simulation time' ) robot_name = DeclareLaunchArgument ( 'robot_name' , default_value = 'your_robot' , description = 'Name of the robot' ) # Robot state publisher robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'screen' , parameters = [{ 'robot_description' : launch . substitutions . Command ([ 'xacro ' , launch . substitutions . FindPackageShare ( 'your_package' ), '/urdf/robot.urdf.xacro robot_name:=' , LaunchConfiguration ( 'robot_name' ) ]), 'use_sim_time' : LaunchConfiguration ( 'use_sim_time' ) }] ) # Joint state publisher joint_state_publisher = Node ( package = 'joint_state_publisher_gui' , executable = 'joint_state_publisher_gui' , name = 'joint_state_publisher_gui' , output = 'screen' , parameters = [{ 'use_sim_time' : LaunchConfiguration ( 'use_sim_time' ) }] ) # RViz rviz = Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , output = 'screen' , arguments = [ '-d' , launch . substitutions . PathJoinSubstitution ([ launch . substitutions . FindPackageShare ( 'your_package' ), 'config' , 'rviz_config.rviz' ])] ) return LaunchDescription ([ use_sim_time , robot_name , robot_state_publisher , joint_state_publisher , rviz ])","title":"Launch Files"},{"location":"resource-package.html#rviz-configuration","text":"Visualization setup for robot monitoring: # RViz configuration for robot visualization Panels : - Class : rviz_common/Displays Name : Displays Property Tree Widget : Splitter Ratio : 0.5 - Class : rviz_common/Views Name : Views Property Tree Widget : Splitter Ratio : 0.5 Visualization Manager : Class : \"\" Displays : - Class : rviz_default_plugins/RobotModel Name : RobotModel Value : true Robot Description : robot_description TF Prefix : \"\" - Class : rviz_default_plugins/TF Name : TF Value : true Show Names : true Show Axes : true Show Arrows : true Marker Scale : 1.0 - Class : rviz_default_plugins/LaserScan Name : LaserScan Value : true Topic : /scan Size (m) : 0.1 Color : 255; 0; 0 - Class : rviz_default_plugins/Grid Name : Grid Value : true Cell Size : 1.0 Color : 160; 160; 164 Global Options : Background Color : 48; 48; 48 Frame Rate : 30 Fixed Frame : base_link Tools : - Class : rviz_default_plugins/Interact Value : true - Class : rviz_default_plugins/MoveCamera Value : true - Class : rviz_default_plugins/Select Value : true Views : - Class : \"\" Name : Current View Type : rviz_default_plugins/Orbit Value : true Distance : 5.0 Focal Point : X : 0.0 Y : 0.0 Z : 0.0 Pitch : 0.0 Yaw : 0.0","title":"RViz Configuration"},{"location":"resource-package.html#usage-examples","text":"","title":"Usage Examples"},{"location":"resource-package.html#basic-robot-description","text":"<?xml version=\"1.0\"?> <robot name= \"simple_robot\" > <!-- Base link --> <link name= \"base_link\" > <visual> <geometry> <cylinder radius= \"0.1\" length= \"0.2\" /> </geometry> <material name= \"red\" > <color rgba= \"1.0 0.0 0.0 1.0\" /> </material> </visual> </link> <!-- Wheel links --> <link name= \"wheel_left\" > <visual> <geometry> <cylinder radius= \"0.05\" length= \"0.05\" /> </geometry> </visual> </link> <link name= \"wheel_right\" > <visual> <geometry> <cylinder radius= \"0.05\" length= \"0.05\" /> </geometry> </visual> </link> <!-- Joints --> <joint name= \"wheel_left_joint\" type= \"continuous\" > <parent link= \"base_link\" /> <child link= \"wheel_left\" /> <origin xyz= \"-0.1 0.1 0\" rpy= \"1.5708 0 0\" /> <axis xyz= \"0 1 0\" /> </joint> <joint name= \"wheel_right_joint\" type= \"continuous\" > <parent link= \"base_link\" /> <child link= \"wheel_right\" /> <origin xyz= \"-0.1 -0.1 0\" rpy= \"1.5708 0 0\" /> <axis xyz= \"0 1 0\" /> </joint> </robot>","title":"Basic Robot Description"},{"location":"resource-package.html#controller-configuration","text":"YAML configuration for robot controllers: controller_manager : ros__parameters : update_rate : 100 # Hz joint_state_broadcaster : type : joint_state_broadcaster/JointStateBroadcaster diff_drive_controller : type : diff_drive_controller/DiffDriveController diff_drive_controller : ros__parameters : left_wheel_names : [ \"wheel_left_joint\" ] right_wheel_names : [ \"wheel_right_joint\" ] wheel_separation : 0.2 wheel_radius : 0.05 use_stamped_vel : false publish_limited_velocity : true velocity_rolling_window_size : 10 publish_rate : 50.0 open_loop : true enable_odom_tf : true cmd_vel_timeout : 0.5 publish_tf : true odom_frame_id : \"odom\" base_frame_id : \"base_link\" pose_covariance_diagonal : [ 0.001 , 0.001 , 0.001 , 0.001 , 0.001 , 0.001 ] twist_covariance_diagonal : [ 0.001 , 0.001 , 0.001 , 0.001 , 0.001 , 0.001 ] # Limits linear.x.has_velocity_limits : true linear.x.has_acceleration_limits : true linear.x.has_jerk_limits : false linear.x.max_velocity : 1.0 linear.x.min_velocity : -1.0 linear.x.max_acceleration : 2.0 linear.x.min_acceleration : -2.0 angular.z.has_velocity_limits : true angular.z.has_acceleration_limits : true angular.z.has_jerk_limits : false angular.z.max_velocity : 3.0 angular.z.min_velocity : -3.0 angular.z.max_acceleration : 6.0 angular.z.min_acceleration : -6.0","title":"Controller Configuration"},{"location":"resource-package.html#gazebo-simulation-launch","text":"Launch file for Gazebo simulation: import os import launch import launch_ros from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , ExecuteProcess , IncludeLaunchDescription from launch.conditions import IfCondition from launch.substitutions import LaunchConfiguration , PathJoinSubstitution from launch_ros.actions import Node from launch_ros.substitutions import FindPackageShare def generate_launch_description (): # Declare arguments world = DeclareLaunchArgument ( 'world' , default_value = 'worlds/empty.world' , description = 'Gazebo world file' ) # Gazebo launch gazebo = IncludeLaunchDescription ( PathJoinSubstitution ([ FindPackageShare ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' ]), launch_arguments = { 'world' : LaunchConfiguration ( 'world' ) } . items () ) # Robot state publisher robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , parameters = [{ 'robot_description' : launch . substitutions . Command ([ 'xacro ' , PathJoinSubstitution ([ FindPackageShare ( 'your_package' ), 'urdf' , 'robot.urdf.xacro' ]) ]) }] ) # Spawn robot in Gazebo spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , '/robot_description' , '-entity' , 'my_robot' ] ) # Controller manager controller_manager = Node ( package = 'controller_manager' , executable = 'ros2_control_node' , parameters = [ PathJoinSubstitution ([ FindPackageShare ( 'your_package' ), 'config' , 'controllers.yaml' ]) ] ) # Load controllers load_joint_state_controller = ExecuteProcess ( cmd = [ 'ros2' , 'control' , 'load_controller' , '--set-state' , 'active' , 'joint_state_broadcaster' ], output = 'screen' ) load_diff_drive_controller = ExecuteProcess ( cmd = [ 'ros2' , 'control' , 'load_controller' , '--set-state' , 'active' , 'diff_drive_controller' ], output = 'screen' ) return LaunchDescription ([ world , gazebo , robot_state_publisher , spawn_entity , controller_manager , load_joint_state_controller , load_diff_drive_controller ])","title":"Gazebo Simulation Launch"},{"location":"resource-package.html#configuration-options","text":"","title":"Configuration Options"},{"location":"resource-package.html#robot-description-features","text":"Links : Define rigid bodies with visual, collision, and inertial properties Joints : Specify connections between links (revolute, prismatic, fixed, etc.) Materials : Define colors and textures for visualization Transmissions : Configure actuator interfaces Gazebo Extensions : Simulation-specific properties","title":"Robot Description Features"},{"location":"resource-package.html#launch-configuration-options","text":"Composable Nodes : Load components into existing processes Lifecycle Management : Control node startup sequences Parameter Files : Load YAML configuration files Event Handlers : Respond to process events Conditional Execution : Enable/disable components based on arguments","title":"Launch Configuration Options"},{"location":"resource-package.html#asset-organization","text":"Meshes : STL, OBJ, DAE files for 3D visualization Textures : Image files for material properties CAD Files : Source files for mesh generation Documentation : Setup guides and configuration references","title":"Asset Organization"},{"location":"resource-package.html#building-and-installation","text":"","title":"Building and Installation"},{"location":"resource-package.html#package-installation","text":"# Build the package colcon build --packages-select your_package # Source the workspace source install/setup.bash # Verify installation ros2 pkg list | grep your_package","title":"Package Installation"},{"location":"resource-package.html#testing-urdf","text":"# Check URDF syntax check_urdf urdf/robot.urdf # View in RViz ros2 launch your_package display.launch.py # Validate Xacro xacro urdf/robot.urdf.xacro","title":"Testing URDF"},{"location":"resource-package.html#launch-file-testing","text":"# Test launch file syntax ros2 launch your_package robot.launch.py --show-args # Dry run (don't actually start processes) ros2 launch your_package robot.launch.py --non-interactive","title":"Launch File Testing"},{"location":"resource-package.html#best-practices","text":"","title":"Best Practices"},{"location":"resource-package.html#urdf-design","text":"Use consistent naming conventions Include collision geometries for navigation Define appropriate joint limits Use Xacro for complex robots Include inertial properties for simulation","title":"URDF Design"},{"location":"resource-package.html#launch-file-organization","text":"Use descriptive argument names Include default values for all arguments Group related nodes logically Use conditional includes for optional components Document launch arguments","title":"Launch File Organization"},{"location":"resource-package.html#file-organization","text":"Keep related files together Use descriptive directory names Include README files for complex configurations Version control large assets appropriately","title":"File Organization"},{"location":"resource-package.html#integration-with-other-packages","text":"","title":"Integration with Other Packages"},{"location":"resource-package.html#using-resource-packages","text":"# In another package's launch file from launch_ros.substitutions import FindPackageShare # Include robot description robot_description_launch = IncludeLaunchDescription ( PathJoinSubstitution ([ FindPackageShare ( 'robot_description_package' ), 'launch' , 'description.launch.py' ]) )","title":"Using Resource Packages"},{"location":"resource-package.html#parameter-files","text":"# Load parameters from resource package config_file = PathJoinSubstitution ([ FindPackageShare ( 'robot_config_package' ), 'config' , 'robot_config.yaml' ]) node = Node ( package = 'robot_control' , executable = 'robot_controller' , parameters = [ config_file ] )","title":"Parameter Files"},{"location":"resource-package.html#troubleshooting","text":"","title":"Troubleshooting"},{"location":"resource-package.html#common-issues","text":"","title":"Common Issues"},{"location":"resource-package.html#urdf-parsing-errors","text":"Symptoms: check_urdf reports syntax errors Solution: Validate XML syntax and check for missing required attributes","title":"URDF Parsing Errors"},{"location":"resource-package.html#launch-file-failures","text":"Symptoms: Launch fails with import errors Solution: Check Python path and ensure all dependencies are installed","title":"Launch File Failures"},{"location":"resource-package.html#rviz-display-issues","text":"Symptoms: Robot not showing in RViz Solution: Verify TF tree and robot_description parameter","title":"RViz Display Issues"},{"location":"resource-package.html#gazebo-spawn-failures","text":"Symptoms: Robot not appearing in Gazebo Solution: Check model format and spawn arguments","title":"Gazebo Spawn Failures"},{"location":"resource-package.html#debug-tips","text":"Use ros2 launch --debug for detailed launch output Enable Gazebo verbose logging: gzserver --verbose Use ros2 doctor to check system health Validate URDF with urdf_to_graphiz for visualization","title":"Debug Tips"},{"location":"resource-package.html#advanced-usage","text":"","title":"Advanced Usage"},{"location":"resource-package.html#modular-robot-descriptions","text":"<!-- common_links.urdf.xacro --> <xacro:macro name= \"wheel_link\" params= \"name radius length color\" > <link name= \"${name}\" > <visual> <geometry> <cylinder radius= \"${radius}\" length= \"${length}\" /> </geometry> <material name= \"${color}_material\" > <color rgba= \"${color}\" /> </material> </visual> <collision> <geometry> <cylinder radius= \"${radius}\" length= \"${length}\" /> </geometry> </collision> </link> </xacro:macro>","title":"Modular Robot Descriptions"},{"location":"resource-package.html#dynamic-launch-configurations","text":"def generate_launch_description (): # Dynamic node creation based on configuration nodes = [] # Load configuration config = load_yaml_config ( 'robot_config.yaml' ) for sensor in config [ 'sensors' ]: node = Node ( package = sensor [ 'package' ], executable = sensor [ 'executable' ], name = sensor [ 'name' ], parameters = [ sensor [ 'params' ]] ) nodes . append ( node ) return LaunchDescription ( nodes )","title":"Dynamic Launch Configurations"},{"location":"resource-package.html#multi-robot-scenarios","text":"def generate_launch_description (): robots = [ 'robot1' , 'robot2' , 'robot3' ] nodes = [] for robot in robots : # Robot state publisher for each robot rsp = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = f 'rsp_ { robot } ' , namespace = robot , parameters = [{ 'robot_description' : get_robot_description ( robot ), 'frame_prefix' : f ' { robot } /' }] ) nodes . append ( rsp ) return LaunchDescription ( nodes )","title":"Multi-Robot Scenarios"},{"location":"resource-package.html#migration-from-ros-1","text":"Key differences when migrating resource packages: - Update URDF syntax for ROS 2 conventions - Convert launch files from XML to Python - Update parameter file formats - Use new RViz configuration format - Update Gazebo integration methods - Use ament instead of catkin","title":"Migration from ROS 1"},{"location":"resource-package.html#contributing","text":"To improve the resource template: Add more URDF examples for different robot types Include additional launch file patterns Add more RViz configuration examples Include simulation-specific configurations Add validation tools and best practices See the contributing guide for details on modifying templates.","title":"Contributing"},{"location":"troubleshooting.html","text":"Troubleshooting Common Issues \"Language Model API not available\" Solution: Install and activate GitHub Copilot Chat extension \"Build fails with visibility errors\" Solution: Check that *_BUILDING_LIBRARY macro is defined in CMakeLists.txt \"Python imports fail\" Solution: Ensure Python path includes workspace and check setup.py and setup.cfg \"Node doesn't register as component\" Solution: Verify RCLCPP_COMPONENTS_REGISTER_NODE macro usage Getting Help Check the GitHub Issues page Review template-specific documentation Examine generated code comments for guidance","title":"Troubleshooting"},{"location":"troubleshooting.html#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting.html#common-issues","text":"","title":"Common Issues"},{"location":"troubleshooting.html#language-model-api-not-available","text":"Solution: Install and activate GitHub Copilot Chat extension","title":"\"Language Model API not available\""},{"location":"troubleshooting.html#build-fails-with-visibility-errors","text":"Solution: Check that *_BUILDING_LIBRARY macro is defined in CMakeLists.txt","title":"\"Build fails with visibility errors\""},{"location":"troubleshooting.html#python-imports-fail","text":"Solution: Ensure Python path includes workspace and check setup.py and setup.cfg","title":"\"Python imports fail\""},{"location":"troubleshooting.html#node-doesnt-register-as-component","text":"Solution: Verify RCLCPP_COMPONENTS_REGISTER_NODE macro usage","title":"\"Node doesn't register as component\""},{"location":"troubleshooting.html#getting-help","text":"Check the GitHub Issues page Review template-specific documentation Examine generated code comments for guidance","title":"Getting Help"}]}