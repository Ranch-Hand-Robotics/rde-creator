name: "Node.js ROS 2 Node"
version: 0.0.0
description: A template for creating Node.js-based ROS 2 nodes using rclnodejs with various communication patterns
license: "MIT"
icon: "🌐"
short_description: "Web integration, async I/O"
ai_directive: |
  This is a ROS 2 Node.js node template using rclnodejs. When generating code for this template:

  HIGH PRIORITY REQUIREMENTS:
  - Create a complete, functional ROS 2 Node.js node using rclnodejs
  - Follow ROS 2 Node.js best practices and conventions
  - Include proper node lifecycle management (initialization, spinning, shutdown)
  - Use appropriate ROS 2 message types and interfaces
  - Implement proper error handling and logging
  - Include comprehensive JSDoc comments and documentation
  - Follow ROS 2 naming conventions for nodes, topics, services, and parameters

  NODE.JS-SPECIFIC GUIDELINES:
  - Use modern Typescript 5+ syntax and features
  - Do not usr Javascript; use Typescript only
  - Use ES6 modules and import/export syntax
  - Implement proper async/await patterns for asynchronous operations
  - Include JSDoc type annotations for better code maintainability
  - Use console logging with appropriate levels for debugging
  - Handle ROS 2 exceptions properly
  - Include proper QoS settings for reliability and durability
  - Use timer callbacks for periodic tasks
  - Implement graceful shutdown handling with process signals

  NODE ARCHITECTURE PATTERNS:
  - Publisher nodes: Include message publishing at configurable rates
  - Subscriber nodes: Include message processing with callbacks
  - Service nodes: Include both client and server implementations
  - Action nodes: Include action server/client with proper goal handling
  - Parameter nodes: Include dynamic parameter handling
  - Timer-based nodes: Include periodic task execution

  QUALITY ASSURANCE:
  - Include proper imports and rclnodejs dependencies
  - Add input validation for parameters and messages
  - Include example usage in JSDoc comments
  - Ensure proper cleanup and resource management
  - Add proper error handling for asynchronous operations
  - Add Test cases using Jest framework if tests are prompted by the user.

  Code structure should follow this layout:
  replaced with actual package name and node name where applicable.

  ```
  package_name/
  ├── package.xml
  ├── CMakeLists.txt
  ├── README.md
  ├── LICENSE
  ├── CONTRIBUTING.md
  ├── Agents.md
  ├── .gitignore
  ├── resource/
  │   └── package_name
  ├── test/
  │   ├── setup.ts              # Test entrypoint
  │   └── package_name.test.ts  # Unit tests if specified; otherwise do not include.
  ├── README.md
  ├── LICENSE
  ├── CONTRIBUTING.md
  ├── Agents.md
  ├── .gitignore
  ├── launch/
  │   └── node.launch.py  # One launch simple file for each node to facilitate debugging. If multiple nodes are included, create a launch file which calls each node's launch file.
  ├── package_name/
      ├── package.json
      └── node.ts
  ```